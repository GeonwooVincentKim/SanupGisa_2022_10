I. S/W 생명 주기의 V Model
1. 애플리케이션 Test, S/W 개발 단계 연결하여 표현
2. 각 단계별 Test

<Test 계획 및 설계>              <Test 수행>
요구사항       <---------------> 인수 Test
(Requirement)                   (Acceptance Test)

분석            <---------->    System Test
(Specification)

설계 (Design) <------> 통합 Test (Integration Test)         

구현 (Code) <---> 단위 Test (Unit Test)

** V Model
- System 검증, Test 작업 강조하기 위해 고안된 Model

3. 단위 Test (Unit Test)
- 1. 구현(코딩) 된 모듈 (함수, 서브루틴, 컴포넌트 정의) 기능 수행 여부 판정
- 2. 주로 구조 기반 Test (내부 논리 흐름) 수행

4. 통합 Test (Integration Test)
- 모듈 간 Interface 연계 검증, Interface 오류 확인, 상호 작용 및 연계 동작 여부 판정

5. System Test
- 1. 해당 System (OS, DBMS 등)에서 완벽하게 수행 여부 확인
- 2. Blackbox Test -> 기능적 요구사항, Whitebox Test -> 비기능적 요구사항

6. 인수 Test (Accpetance Test)
- 1. 사용자 요구분석 명세서 모두 충족 여부 확인
- 2. 종류
  = 1. 사용자 인수 Test -> 사용자가 System 사용 적절성 여부 확인
  = 2. 운영상 인수 Test -> System 관리자, 수행 (백업, 보안 취약성)
  = 3. 계약 인수 Test -> 계약 조건 준수 여부 확인
  = 4. 규정 인수 Test -> 정부 지침, 법규, 규정 확인
  = 5. 알파 검사 -> 사용자는 시험, 개발자는 뒤에서 결과 지켜보는 검사
  = 6. 베타 검사 -> 실업무, 사용자 직접 시험하는 검사


II. 통합 Test (Integration Test)
1. 개념 -> 모듈 간 Interface 관련 오류 및 결함 찾아내기 위한 체계적인 Test 기법
2. 목적 -> 단위 Test 가 끝난 모듈 또는 컴포넌트 단위의 Program, 설계 단계, 동일 구조 여부 확인
3. 분류
- 1. 비점증적 통합 방식 
  = 1. 전체 프로그램 대상, 오류 발견, 장애 위치 파악 / 수정 어려움
  = 2. 소규모 SW 가 적합 -> 단시간 내 Test
  = 3. 빅뱅 방식 -> 모듈 간 Interface 를 고려하지 않음

- 2. 점증적 통합 방식
  = 오류 수정 용이, Interface 연관 오류 완전히 Test 가능성 높음


III. 하향식 통합 (Top Down)
1. 정의
- 1. 메인 제어 모듈 (프로그램), 아래 방향으로 제어 경로 따라 이동하면서 하향식으로 통합 진행
- 2. 하위 모듈 & 최하위 모듈 = '깊이-우선' or '너비-우선' 방식으로 통합

2. 수행 단계
- 1. 메인 제어 모듈 -> 작성된 프로그램 사용
- 2. 하위 제어 모듈, 모든 하위 컴포넌트 -> 더미 모듈인 스텁(Stub, 테스트용) 개발
- 3. 깊이 우선 방식 or 너비 우선 방식 -> Stub 이 한 번에 하나씩 실제 모듈로 대체
- 4. 각 모듈, 컴포넌트 통합, Test 수행
- 5. 테스트 완료 후, Stub -> 실제 모듈 또는 컴포넌트로 작성

** 하향식 통합
- 1. 깊이 우선 방식 -> 수직
- 2. 넓이 우선 방식 -> 수평
- 3. 메인 제어 모듈 -> Program
- 4. 하위 제어 모듈, 모든 하위 컴포넌트 -> Stub
- 5. Stub 
  = 1.모듈 간 통합 시험하기 위해 일시적 제공되는 시험용 모듈
  = 2. 상위 모듈 O, 하위 모듈 X -> 하위 모듈 대체
  = 3. S/W 개발, Test 병행하므로 필요
  

IV. 상향식 통합 (Bottom Up)
1. 정의 -> 최하위 레벨 모듈, 컴포넌트 => 위쪽 방향, 제어 경로 따라 이동하면서 구축, Test 진행
2. 수행 단계
- 1. 최하위 Level 의 모듈, Component 들이 하위 모듈의 기능 수행하는 Cluster 로 결합
- 2. 더미 모듈인 Driver (제어 프로그램) 를 작성
- 3. 각 통합된 Cluster 단위 Test
- 4. 각 Cluster 들은 Program 의 위쪽으로 결합, Driver 는 실제 모듈, 컴포넌트로 대체

** Driver
- 하위 모듈 O, 상위 모듈 X -> 하위 모듈 구동하기 위한 제어 Program (Interface)

  
V. 혼합식 통합
- 상위 Level (수준) -> 하향식 통합, 하위 Level (수준) -> 상향식 통합 => 최적의 Test

빅뱅
1. Test 수행 방법 -> 모든 모듈 동시 통합 후, Test 수행
2. Driver / Stub -> Driver / Stub 없이 실제 Module 로 Test
3. 장점 -> 단시간 Test O, 작은 System 에 유리
4. 단점 -> 장애 위치 파악 어렵고, 모든 모듈이 개발되어야 가능

상향식 (Bottom Up)
1. Test 수행 방법 -> 최하위 모듈부터 점진적, 상위 모듈과 함께 Test
2. Driver / Stub -> Test Driver 필요
3. 장점 -> 장애 위치 파악 쉽고, 모든 모듈 개발해야 하는 시간낭비 필요 없음
4. 단점 -> 중요 모듈들이 마지막에 Test 될 가능성 있음

하향식 (Top Down)
1. Test 수행 방법 -> 최상위 모듈부터 하위 모듈을 통합하면서 Test
2. Driver / Stub -> Test Stub 필요
3. 장점 -> 장애 위치 파악 쉽고, 중요 모듈 선 Test 가능, 설계성 결함 조기 발견
4. 단점 -> 많은 Stub 필요, 하위 모듈들의 불충분한 Test 수행


VI. 회귀 Test (Regression Test)
1. 정의 
- 1. 통합 Test 완료 후, 변경된 모듈, 컴포넌트 있을 경우 -> 새로운 오류 여부 확인하기 위해 수행
- 2. 모듈, 컴포넌트의 변화로 인해 의도치 않은 오류 생기지 않았음을 보증하기 위해 반복 Test

2. 회귀 TC 선정 방법
- 1. TC 대표적인 Sample 도출
- 2. 영향도 가장 높은 애플리케이션 기능에 집중한 추가적인 TC 도출
- 3. 실제 수정 발생한 모듈, 컴포넌트에서부터 시행하는 TC 도출
  = 변경된 부분 테스트할 수 있는 TC 도출


VII. TC (Test Case)
1. 정의
- 1. 명세 기반 Test 설계 산출물
- 2. 입력 값, 실행 조건, 기대 결과로 구성된 Test 항목의 명세서
- 3. 예시
  = Test ID, 단계명, Test 목적, Test 기능, 입력 Data, Test 단계, Test 환경, 전체 조건, 성공 / 실패 기준

2. TC 작동 순서
- 1. TC 정확성, 재사용성, 간결성 보장
- 2. Test 계획 검토 및 자료 확보
  = Test 계획 재검토, System 자료, 정보 확보하여 System 요구사항과 기능 명세서 검토

- 3. 위험 평가 및 우선순위 결정
  = 결함 위험 정도에 따른 우선순위 결정
  
- 4. Test 요구사항 정의
  = System 요구사항, Test 대상 재검토, Test 할 특성, 조건, 기능 식별 및 분석
  
- 5. Test 구조 설계 및 Test 방법 결정
  = TC 일반적 형식 결정, TC 분류 방법 결정
  
- 6. TC 정의 -> TC 작성, 입력 값, 실행 조건, 예상 결과 기술
- 7. TC 타당성 확인 및 유지보수
  = 기능 또는 환경 변화에 따라 TC 갱신, TC 의 유용성 검토
  

VIII. Test Oracle
1. 정의 -> 사전에 정의된 참 값을 입력하여 비교
2. Test Oracle 유형
- 1. 참 (True) Oracle -> 모든 입력 값, 발생된 오류 모두 검출
- 2. 샘플링 (Sampling) Oracle -> 특정한 몇 개의 입력 값
- 3. 휴리스틱 (Heuristic) Oracle
  = 1. 나머지 값들에 대해서는 Heuristic (추정) 으로 처리
  = 2. 확률, 직관에 의한 예상결과 작성
 
- 4. 일관성 검사 (Consistent) Oracle
  = 수행 전과 후의 결과 값이 동일한지 확인

3. Oracle 적용 방안
- 1. 참 Oracle -> 항공기, 임베디드, 발전소 S/W => 미션 크리티컬한 업무에 적용
- 2. 샘플링/추정 Oracle -> 일반, 업무용, 게임, 오락 => 일반적인 업무에 적용


IX. Test 시나리오 (Test Scenario)
1. 정의 -> TC 집합, TC 동작 순서 기술한 문서이며 Test 를 위한 절차 명세한 문서
2. Test 시나리오 작성 시 유의점
- 1. Test 시나리오 분리 작성 -> System 별, 모듈별, 항목별 Test 시나리오 분리 작성
- 2. 고객 요구사항과 설계 문서 -> Test 시나리오 작성
- 3. 식별자 번호, 순서 번호, Test Data, TC, 예상 결과, 확인 항목 포함


X. Test Data 및 Test 조건의 이해
1. Test Data
- 1. System 적합성 시험하기 위해 특별히 개발된 Data 집합, 조건을 갖춘 Data
- 2. Test Data 의 필요성 -> 잘못된 Data 를 사용하면 잘못된 결과가 도출되어 시간 낭비
- 3. Test Data 의 유형 -> 실제 Data, 가상 Data 
- 4. Test Data 준비 -> 실제 운영 Data 복제하여 준비 (실제 Data), Script 를 통해서 생성 (가상 Data)

2. Test 조건
- 1. Test 시작 조건 -> 단계별 또는 회차별 Test 수행을 위해 모든 조건을 만족하지 않아도 Test 시작 가능
- 2. Test 종료 조건 -> 정상적인 Test 를 모두 수행, Test 일정이 만료, 비용을 모두 소진
- 3. Test 성공과 실패의 판단 기준
  = 1. 예상 결과 만족하면 성공, 아니면 실패 (기능 및 비기능 Test 시나리오) 
  = 2. 같은 결과가 나올 떄 성공으로 판단 가능 (동일 Data, Event 중복)
  

XI. Test 환경 구축
1. 정의 -> 실제 운영 System 과 동일, 유사한 사양의 H/W, S/W, Network 등의 시설 구축
2. Test 환경 구축의 유형
- 1. H/W 기반 Test 환경 구축
  = 서버 장비 (WAS, DBMS), Client 장비 (노트북, PC), Network (내부 LAN, 공용 인터넷라인) 장비 설치

- 2. S/W 기반의 Test 환경 구축 
  = 응용 S/W 를 설치, 필요한 Data 를 구축

- 3. 가상 System 기반의 Test 환경
  = 독립된 Test 환경 구축하기 힘든 경우, 가상 머신 (Virtual Machine), Network => VLAN

** 가상머신 (Virtual Machine)
- Computer 를 Emulator 하는 S/W, 응용 Program 을 설치 및 실행 가능

** VLAN (Virtual Local Area Network)
- 물리적인 망 구성과는 상관없이 가상적으로 구성된 근거리 통신망 (LAN)


