I. S/W 생명 주기의 V Model
1. 애플리케이션 Test, S/W 개발 단계 연결하여 표현
2. 각 단계별 Test

<Test 계획 및 설계>              <Test 수행>
요구사항       <---------------> 인수 Test
(Requirement)                   (Acceptance Test)

분석            <---------->    System Test
(Specification)

설계 (Design) <------> 통합 Test (Integration Test)         

구현 (Code) <---> 단위 Test (Unit Test)

** V Model
- System 검증, Test 작업 강조하기 위해 고안된 Model

3. 단위 Test (Unit Test)
- 1. 구현(코딩) 된 모듈 (함수, 서브루틴, 컴포넌트 정의) 기능 수행 여부 판정
- 2. 주로 구조 기반 Test (내부 논리 흐름) 수행

4. 통합 Test (Integration Test)
- 모듈 간 Interface 연계 검증, Interface 오류 확인, 상호 작용 및 연계 동작 여부 판정

5. System Test
- 1. 해당 System (OS, DBMS 등)에서 완벽하게 수행 여부 확인
- 2. Blackbox Test -> 기능적 요구사항, Whitebox Test -> 비기능적 요구사항

6. 인수 Test (Accpetance Test)
- 1. 사용자 요구분석 명세서 모두 충족 여부 확인
- 2. 종류
  = 1. 사용자 인수 Test -> 사용자가 System 사용 적절성 여부 확인
  = 2. 운영상 인수 Test -> System 관리자, 수행 (백업, 보안 취약성)
  = 3. 계약 인수 Test -> 계약 조건 준수 여부 확인
  = 4. 규정 인수 Test -> 정부 지침, 법규, 규정 확인
  = 5. 알파 검사 -> 사용자는 시험, 개발자는 뒤에서 결과 지켜보는 검사
  = 6. 베타 검사 -> 실업무, 사용자 직접 시험하는 검사


II. 통합 Test (Integration Test)
1. 개념 -> 모듈 간 Interface 관련 오류 및 결함 찾아내기 위한 체계적인 Test 기법
2. 목적 -> 단위 Test 가 끝난 모듈 또는 컴포넌트 단위의 Program, 설계 단계, 동일 구조 여부 확인
3. 분류
- 1. 비점증적 통합 방식 
  = 1. 전체 프로그램 대상, 오류 발견, 장애 위치 파악 / 수정 어려움
  = 2. 소규모 SW 가 적합 -> 단시간 내 Test
  = 3. 빅뱅 방식 -> 모듈 간 Interface 를 고려하지 않음

- 2. 점증적 통합 방식
  = 오류 수정 용이, Interface 연관 오류 완전히 Test 가능성 높음


III. 하향식 통합 (Top Down)
1. 정의
- 1. 메인 제어 모듈 (프로그램), 아래 방향으로 제어 경로 따라 이동하면서 하향식으로 통합 진행
- 2. 하위 모듈 & 최하위 모듈 = '깊이-우선' or '너비-우선' 방식으로 통합

2. 수행 단계
- 1. 메인 제어 모듈 -> 작성된 프로그램 사용
- 2. 하위 제어 모듈, 모든 하위 컴포넌트 -> 더미 모듈인 스텁(Stub, 테스트용) 개발
- 3. 깊이 우선 방식 or 너비 우선 방식 -> Stub 이 한 번에 하나씩 실제 모듈로 대체
- 4. 각 모듈, 컴포넌트 통합, Test 수행
- 5. 테스트 완료 후, Stub -> 실제 모듈 또는 컴포넌트로 작성

** 하향식 통합
- 1. 깊이 우선 방식 -> 수직
- 2. 넓이 우선 방식 -> 수평
- 3. 메인 제어 모듈 -> Program
- 4. 하위 제어 모듈, 모든 하위 컴포넌트 -> Stub
- 5. Stub 
  = 1.모듈 간 통합 시험하기 위해 일시적 제공되는 시험용 모듈
  = 2. 상위 모듈 O, 하위 모듈 X -> 하위 모듈 대체
  = 3. S/W 개발, Test 병행하므로 필요
  

IV. 상향식 통합 (Bottom Up)
1. 정의 -> 최하위 레벨 모듈, 컴포넌트 => 위쪽 방향, 제어 경로 따라 이동하면서 구축, Test 진행
2. 수행 단계
- 1. 최하위 Level 의 모듈, Component 들이 하위 모듈의 기능 수행하는 Cluster 로 결합
- 2. 더미 모듈인 Driver (제어 프로그램) 를 작성
- 3. 각 통합된 Cluster 단위 Test
- 4. 각 Cluster 들은 Program 의 위쪽으로 결합, Driver 는 실제 모듈, 컴포넌트로 대체

** Driver
- 하위 모듈 O, 상위 모듈 X -> 하위 모듈 구동하기 위한 제어 Program (Interface)

  
V. 혼합식 통합
- 상위 Level (수준) -> 하향식 통합, 하위 Level (수준) -> 상향식 통합 => 최적의 Test

빅뱅
1. Test 수행 방법 -> 모든 모듈 동시 통합 후, Test 수행
2. Driver / Stub -> Driver / Stub 없이 실제 Module 로 Test
3. 장점 -> 단시간 Test O, 작은 System 에 유리
4. 단점 -> 장애 위치 파악 어렵고, 모든 모듈이 개발되어야 가능

상향식 (Bottom Up)
1. Test 수행 방법 -> 최하위 모듈부터 점진적, 상위 모듈과 함께 Test
2. Driver / Stub -> Test Driver 필요
3. 장점 -> 장애 위치 파악 쉽고, 모든 모듈 개발해야 하는 시간낭비 필요 없음
4. 단점 -> 중요 모듈들이 마지막에 Test 될 가능성 있음

하향식 (Top Down)
1. Test 수행 방법 -> 최상위 모듈부터 하위 모듈을 통합하면서 Test
2. Driver / Stub -> Test Stub 필요
3. 장점 -> 장애 위치 파악 쉽고, 중요 모듈 선 Test 가능, 설계성 결함 조기 발견
4. 단점 -> 많은 Stub 필요, 하위 모듈들의 불충분한 Test 수행
