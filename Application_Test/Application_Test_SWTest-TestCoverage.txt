I. S/W (Application) Test
1. 개념 - S/W 결함 찾아내는 활동
- 1. 확인 (Validation) Test -> 사용자 입장, 고객 요구사항, 구현 확인, 결과
- 2. 검증 (Verification) Test -> 개발자(시험자) 입장, 설계 명세서, 만들어졌는지 확인, 결과

2. 필요성 - 오류 발견, 오류 예방 (인스펙션, 오류 사전에 발견), 품질 향상 (신뢰도 향상)
* 인스펙션 (Inspection) - 검토 전문가, 요구사항 명세서 확인, 결함 발견, 검토 방법

3. 원리
- 1. 테스팅은 결함이 존재 (결함 발견 X, 결함 없다고 주장 X)
- 2. 완벽한 Testing 은 불가능 (Risk 분석, 우선순위 토대로 Test 에 집중)
- 3. Testing 은 개발 초기에 시작 (SDLC 각 단계)
- 4. 결함 집중 (Defect Clustering, 소수 특정한 모듈에 결함 집중)
  = 1. 파레토 (Pareto) 법칙 -> 전체 기능 20%, 전체 결함 80%
  = 2. 낚시의 법칙 -> 특정 기능, 모듈, 라이브러리 결함 많이 발견

- 5. 살충제 패러독스 (Pesticide Paradox, 살충제 내성) -> 동일한 TC 반복 실행, TC 리뷰 및 개선
- 6. Testing 은 정황 (Context, 맥락, 관계) 에 의존 -> 정황 (SW 특성, Test 환경, Test 역량), Business Domain (영역, 범위)
- 7. 오류-부재의 궤변 (Absence of Errors Fallacy) -> 결함 모두 제거, 사용자 만족 X, S/W 품질 높지 X
- 8. Test 는 별도의 팀에서 수행, 작은 부분에서 시작, 점차 확대 진행

4. Test Process
- 1. Test 계획 -> Test 목적, 범위, 대상 System 구조, Test 일정, 종료 조건 정의, 조작 및 비용 산정)
- 2. Test 분석 및 Design -> Test 목적과 원칙 검토, 요구사항 분석, Risk 분석, 우선순위 결정, Test Data 준비, Test 환경 및 도구 준비)
- 3. TC 및 Test 시나리오 작성 -> TC 작성, Test Script 작성, TC 검토 확인, Test 시나리오 작성)
- 4. Test 수행 -> 초기 Data Loading, Test 수행, 결함 Reporting)
- 5. Test 결과 및 Reporting -> Test 결과 정리, Test Process Review, Test 결과 평가, Test Reporting)

5. S/W Test 산출물
- 1. Test 계획서 -> Test 수행 계획한 문서)
- 2. TC (Test Case) -> 입력 값, 실행 조건, 기대 결과로 구성, Test 항목 명세서
- 3. Test 시나리오 -> TC 집합, TC 의 동작순서 기술 문서
- 4. Test 결과서 -> Test 결과 정리한 문서

II. SW (Application) Test 유형
1. Test 목적
- 1. 회복(Recovery) Test -> System 고의 실패, System 정상 복귀
- 2. 안전(Security) Test -> 불법적인 S/W 접근, 보안적인 결함 미리 점검
- 3. 강도(Stress, 부하) Test -> 과부하 시 정상작동 검증
- 4. 성능(Performance) Test -> System 응답시간, 특정 시간 내 처리 업무량, 사용자 요구에 System 반응속도
- 5. 구조(Structure) Test -> 내부 논리 경로, Source Code 복잡도
- 6. 회귀(Regression) Test -> 변경, 수정된 Code 의 새로운 결함 발견 여부 평가
- 7. 병행 (Parellel) Test -> 변경된 System 과 기존 System 동일한 Data 입력, 결과 비교

2. Test 종류
- 1. 명세 기반 Test -> 주어진 명세 빠짐없이 TC 구현여부 확인 (동등(동치) 분할, 경계 값 분석))
- 2. 구조 기반 Test -> 내부 논리 흐름에 따라 TC 작성 (구문 기반, 조건 기반)
- 3. 경험 기반 Test -> Tester 경험 토대로, 직관 및 기술능력 기반 (오류 예측 검사)

3. Program 실행여부
- 1. 정적 Test (Static Test) -> Program 실행 없이 Source Code 구조 분석 (Code 검사, 워크스루, Inspection)
- 2. 동적 Test (Dynamic Test) -> Program 실행 요구 (Black Box Test, White Box Test)

* 정형기술 검토 (FTR; Formal Technical Review) -> 요구사항 일치여부 및 결함 발생여부 검토, 정적 분석 기법
- 1. 동료 검토 (Peer Review) -> 명세서 내용 동료들(이해관계자) 에게 직접 설명
- 2. 워크스루 (Walkthrough) -> 오류검출, 해결책은 나중으로 미룸
- 3. 인스펙션 (Inspection) -> 검토 전문가, 요구사항 명세서 확인, 결함 발견, 검토 방법

III. 블랙박스 (Black Box) Test 
1. 사용자 요구사항 명세서, 구현된 기능 Test, 테스트과정 (단위 Test, 통합 Test, System Test, 인수 Test)
2. 종류
- 1. 동치분할검사 (Equivalance Partitioning, 동등분할 기법, 동치 Class 분해)
  = 입력 자료에 초점, TC 생성, 타당한 입력자료와 타당하지 않은 입력자료 개수 균등

- 2. 경계값 분석 (Boundary Value Analysis) -> 입력조건 경계값으로 Test (동치분할 검사 보관)
- 3. 원인-효과 Graph 검사 (Cause Effect Graphing Testing) -> 입력 자료 간 관계와 출력
- 4. 오류 예측 검사 (Falut Based Testing) -> 과거 경험, Tester 감각 (보충적 검사 기법)
- 5. 비교검사 (Comparsion Testing) -> 동일 자료 제공, 동일 결과 출력되는지 Test

IV. 화이트박스 (White Box) Test
1. 내부 로직 -> 수행 경로 구조, Loop (구조 Test), Program 논리적 경로 제어, 모듈 안 작동 직접 관찰, 원시 코드 모든 문장 한 번 이상 수행
2. 종류
- 1. 기초 경로 검사 (Basic Path, Testing, McCabe 제안, 대표적 기법)
  = 1. 논리적 복잡성 측정, 실행 경로 기초 정의
  = 2. McCabe 의 순환 복잡도 (Cyclomatic Complexity) 
    -> 원시 Code 복잡도, 논리적인 경로 수 **(복잡도 = 영역수(폐구간) + 1)
  
- 2. 제어 구조 검사
  = 조건 검사 (논리적 조건), 루프 검사 (반복 구조), 데이터 흐름 검사 (변수 정의, 변수 사용 위치)

3. WhiteBox Test 검증 기준 (Test Coverage, 테스트 커버리지)
- Code (Source Code) Coverage (구문, 결정, 조건)

V. Test 검증 기준 (Test Coverage, 테스트 커버리지)
1. Test 범위 측정, 적정성
2. 기능 기반 Coverage -> 전체 기능 모수, 실제 Test 수행된 기능의 수 측정
3. 라인 Coverage -> 코드 Line 수, Test 수행된 기능 수 / 전체 기능 수
4. Code (Source Code) Coverage
- 1. 구조 Code 자체가 얼마나 Test 되었는지 확인
- 2. 구문 (Statement, 문장) Coverage -> 모든 구문, 제어 구분 X (커버 영역 가장 좁음)
- 3. 결정 (Decision Coverage) -> 모든 분기문 (조건문)
- 4. 조건 (Condition Coverage) -> 모든 개별 조건식
- 5. 조건/결정 Coverage -> 모든 조건문 + 각 개별 조건식
- 6. 다중조건 Coverage -> 모든 개별조건식의 모든 가능한 논리적인 조합 고려
