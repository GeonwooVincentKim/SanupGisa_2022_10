I. SW (Application) Test 의 이해
1. SW Test 의 개념
- 1. 정의 -> S/W 의 결함을 찾아내는 활동
- 2. Test 에 대한 시각
  = 1. 확인 (Validation) Test
    -> 1. 사용자 입장
    -> 2. 고객의 요구사항에 맞게 구현되었는지 확인 => 결과
    
  = 2. 검증 (Verfication) Test
    -> 1. 개발자 (시험자) 입장
    -> 2. 설계 명세서에 맞게 만들어졌는지 점검 => 생산 과정

2. SW Test 의 필요성
- 1. 오류 발견 관점 -> Program 오류 발견, 수정하여 올바른 Program 을 개발하는 활동
- 2. 오류 예방 관점 -> Program 실행 전, Code Review, 동료 검토, Inspection 을 통해 오류를 사전에 발견하는 예방 차원의 활동
- 3. 품질 향상 관점 -> 사용자 요구사항, 기대 수준 만족, 반복적인 Test -> 제품 신뢰도를 향상하는 품질 보증 활동

** Inspection
- 요구사항 명세서 작성자를 제외한 다른 검토 전문가들이 요구사항 명세서 확인, 결함 발견하는 형태의 검토 방법

3. SW Test 의 원리
- 1. Testing 은 결함이 존재함을 밝히는 활동
  = 잠재적인 결함 줄일 수 있지만, 결함이 발견되지 않아도 결함이 없다고 증명할 수 없음
  
- 2. 완벽한 Testing 은 불가 -> 리스크 분석과 우선순위를 토대로 Test 에 집중
- 3. Testing 은 개발 초기에 시작
  = Application 개발 단계에 Test 를 계획, SDLC (Software Development Life Cycle) 의 각 단계, 전략적으로 접근하는 것을 고려
  
- 4. 결함 집중 (Defect Clustering)
  = 1. Application 결함 대부분, 소수 특정한 모듈에 집중되어 존재
  = 2. 파레토 (Pareto) 법칙 -> 전체 결함의 80% 는 S/W 제품 전체 기능 중 20% 에 집중
  = 3. 낚시의 법칙 -> S/W 제품 결함도 특정 기능, 모듈, 라이브러리에서 결함이 많이 발견
  
- 5. 살충제 패러독스 (Pesticide Paradox)
  = 1. 살충제 내성
  = 2. 동일한 Test Case 로 반복 실행 -> 결함 발견 X => 주기적으로 TC (Test Case) 를 Review 및 개선
  
- 6. Testing 은 정황 (Context, 맥락, 관계)에 의존
  = 정황 (SW 특성, 테스트 환경, 테스트 역량 등)과 Business Domain (영역, 범위)에 따라 Test 다르게 수행

- 7. 오류-부재의 궤변 (Absense of Errors Fallacy)
  = S/W 결함 모두 제거해도 사용자 요구사항 만족 X -> 해당 SW 는 품질 높다고 말할 수 없음

- 8. 기타 -> Test 는 별도 Team 에서 수행, 작은 부분에서 시작해서 점차 확대하며 진행

4. Test Process
- 1. 순서
  = Test 계획 -> Test 분석 및 Design -> Test Case 및 시나리오 작성 -> Test 수행 -> Test 결과 평가 및 Reporting
  
- 2. Test 계획 
  = Test 목적, 범위 정의, 대상 System 구조 파악, Test 일정 정의, 종료 조건 정의, 조직 및 비용 산정

- 3. Test 분석 및 Design 
  = Test 목적, 원칙 검토, 요구사항 분석, Risk 분석 및 우선순위 결정, Test Data 준비, Test 환경 및 도구 준비

- 4. Test Case 및 시나리오 작성
  = TC 작성, Test 용 Script 작성, TC 검토 및 확인, Test 시나리오 작성

- 5. Test 수행 -> 초기 Data 로딩, Test 수행, 결함 Reporting
- 6. Test 결과 및 Reporting 
  = Test 결과 정리, Test Process Review, Test 결과 평가, Test Reporitng

- 7. S/W Test 산출물
  = 1. Test 계획서 -> Test 수행을 계획한 문서
  = 2. Test Case -> 입력 값, 실행 조건, 기대 결과로 구성된 Test 항목의 명세서
  = 3. Test 시나리오 -> Test Case 의 집합으로 Test Case 의 동작 순서를 기술한 문서
  = 4. Test 결과서 -> Test 결과를 정리한 문서


II. SW (Application) Test 유형
1. Test 목적에 따른 분류
- 1. 회복 (Recovery) Test
  = System 에 고의로 실패를 유도, System 정상 복귀하는지 Test

- 2. 안전 (Security) Test -> 보안적인 결함을 미리 점검
- 3. 강도 (Stress, 부하) Test
  = System 과부하, System 이 정상적으로 작동되는지 검증
  
- 4. 성능 (Performance) Test 
  = System 응답하는 시간, 특정 시간 내 처리하는 업무량, System 반응하는 속도
  
- 5. 구조 (Structure) Test
  = System 내부 논리 경로, Source Code 복잡도 평가

- 6. 회귀 (Regression) Test
  = 변경 또는 수정된 Code 에 대하여 새로운 결함 발견 여부를 평가
  
- 7. 병행 (Parallet) Test
  = 변경된 System 과 기존 System 에 동일한 Data 를 입력 후, 결과 비교
  
2. Test 종류에 따른 분류
- 1. 명세 기반 Test
  = 1. 주어진 명세를 기반으로 빠짐없이 TC 로 구현하고 있는 확인
  = 2. 동등 분할, 경계 값 분석
  
- 2. 구조 기반 Test
  = 1. S/W 내부 논리 흐름에 따라 TC 를 작성하고 확인
  = 2. 구문 기반, 조건 기반
 
 - 3. 경험 기반 Test
   = 1. Tester 의 경험을 토대로, 직관과 기술 능력 기반 수행
   = 2. 오류 예측 검사
 
 - 4. Program 실행 여부에 따른 분류
   = 1. 정적 Test (Static Test)
     -> 1. Program 실행 없이 Source Code 의 구조 분석
     -> 2. Code 검사, 워크스루, 인스펙션
     
   = 2. 동적 Test (Dynamic Test)
     -> 1. Program 실행을 요구
     -> 2. 블랙박스 Test, 화이트박스 Test
     
** 정형 기술 검토 (FTR: Formal Technical Review)
- 1. S/W 개발 산출물 대상 요구사항 일치여부 및 결함 발생여부를 검토하는 정적 분석 기법
- 2. 동료 검토 (Peer Review)
  = 명세서 내용을 직접 설명, 동료들이 이를 들으면서 결함 발견

- 3. 워크 스루 (Walkthrough)
  = 1. 요구사항 정의서를 미리 배포하여 사전 검토
  = 2. 오류 검출에 초점 두고, 해결책은 나중으로 미룸, 해결책 제시
  
- 4. 인스펙션 (Inspection)
  = 전문가들이 요구사항 명세서를 확인하면서 결함 발견하는 형태


III. 블랙박스 (Black Box) Test
1. 정의
- 1. 사용자 요구사항 명세서를 보면서 Test, 주로 구현된 기능을 Test -> 기능 Test
- 2. Test 과정 (단위 -> 통합 -> System -> 인수) 의 후반부 적용
- 3. 종류
  = 1. 동치 분할 검사 (Equivalence Partitioning, 동등 분할 기법, 동치 Class 분할)
    -> 1. 입력 자료, TC 만들고 검사, 타당한 입력 자료와 그렇지 않은 자료 개수 균등하게 Test
    -> 2. 각 영역에 해당하는 입력 값을 넣고 예상되는 출력 값이 나오는지 실제 값과 비교
    
  = 2. 경계값 분석 (Boundary Value Analysis)
    -> 입력 조건의 경계값으로 Test, 동치 분할 검사 보완
    
  = 3. 원인-효과 그래프 검사 (Cause-Effect Graphing Testing)
    -> 입력 자료 간의 관계와 출력, 효용성 높은 TC 선정하여 Test
  
  = 4. 오류 예측 검사 (Fault Based Testing)
    -> 과거 경험이나 Test 의 감각으로 Test => 보충적 검사 기법
    
  = 5. 비교 검사 (Comparison Testing)
    -> 여러 버전 Program 에 동일 자료 제공, 동일 결과 출력 확인
    

IV. 화이트 박스 (White Box) Test
1. 정의
- 1. Program 의 내부 Logic (수행 경로 구조, Loop 등) 을 보며 Test 수행
- 2. 논리적 경로 제어 (제어 구조, 선택, 반복 부분 수행)
- 3. 모듈 안 작동 직접 관찰, 원시 코드의 모든 문장 한 번 이상 수행
- 4. 종류
  = 1. 기초 경로 검사 (Basic Path Testing, McCabe 제안, 대표적인 기법)
    -> 1. 절차적 설계의 논리적 복잡성을 측정
    -> 2. Test 측정 결과는 실행경로의 기초 정의하는데 지침
  
  = 2. McCabe 의 순한 복잡도 (Cyclomatic Complexity)
    -> 1. 원시 Code 복잡도 정량적으로 평가
    -> 2. 원시 Code 얼마나 복잡한지, 얼마나 많은 논리적인 경로 가지고 있는지 확인
    -> 3. 공식, 복잡도 - 영역수(폐구간) + 1 = 3

       1 ------ 4
     2    ①  5  ②  6   -> 숫자 표현된 곳이 영역수 (폐구간)
       3 ------ 7      -> 여기에서는 영역 수가 2곳
                       -> 복잡도 = 영역수 (폐구간) + 1 => 2 + 1 = 3
