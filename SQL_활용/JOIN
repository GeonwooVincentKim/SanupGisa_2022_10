I. JOIN
1. 개념
- 1. 하나의 SQL 명령문으로 여러 Table 에 저장된 Data 를 한 번에 검색할 수 있는 강력한 기능
- 2. 잘못 사용하면 오히려 질의(Querying) 처리 성능을 저하시키는 경우도 발생 가능
- 3. 두 개 Table 을 연결하는 Join 속성이 있어야 함

2. Join 에서 속성명 중복 해결 방법
- 1. 서로 다른 Table 에 있는 동일한 열 이름을 사용할 경우, 열 이름이 중복되어 구별이 어려운 문제가 발생할 수 있음
- 2. Table 이름과 열 이름 사이에 점(.) 으로 구분하여야 함


II. Join 의 종류
1. CROSS JOIN (Cartesian Product -> 카티션 프로덕트)
- 1. Join 된 Table 사이에 조건이 걸리지 않을 경우에 발생, Table 간 모든 경우의 수에 대해서 Low 가 생성되는 Join 방식
- 2. CROSS JOIN 은 실제 많이 사용하지는 않지만, SQL 성능 Tuning 에 사용하기도 함
- 3. 예제

1) SELECT * FROM 부서, 사원;
2) SELECT * FROM 부서 CROSS JOIN 사원;

부서                                 사원                            부서번호   생산명   사원이름   부서번호
부서번호   사원명                     사원 이름   부서번호              A001     생산부     김윤환     A001 
A001      생산부       CROSS JOIN     김윤환      A001         =>     A002      자재부    김윤환      A001
A002      자재부                      장기영      A001                A003      인사부    김윤환      A001
A003      인사부                      김옥분      A002                A001      생산부    장기영      A001
                                                                     A002      자재부    장기영      A001
                                                                     A003      인사부    장기영      A001
                                                                     A001      생산부    김옥분      A002
                                                                     A002      자재부    김옥분      A002
                                                                     A003      인사부    김옥분      A002
                                                                     

2. INNER JOIN (내부 Join -> JOIN)
- 1. 일반적으로 부르는 JOIN
- 2. Table 간 관계에서 참조 무결성 관계를 통해 발생된 Column 에 의해 Join 발생
- 3. 예제

1) SELECT 부서, 부서번호, 부서명, 사원이름 FROM 부서, 사원 WHERE 부서.부서번호 = 사원.부서번호;
2) SELECT 부서, 부서번호, 부서명, 사원이름 FROM 부서 INNER JOIN 사원 ON 부서.부서번호 = 사원.부서번호;
--> INNER 생략 가능

3) SELECT 부서, 부서번호, 부서명, 사원이름 FROM 부서 NATURAL JOIN 사원;
--> 두 Table 의 동일한 이름을 가지는 Column 은 모두 Join 됨

4) SELECT 부서, 부서번호, 부서명, 사원이름 FROM 부서 JOIN 사원 USING(부서번호);
--> 동일한 Column 이 두 개 이상일 경우, JOIN ~ USING 문장으로 Column 을 제어

부서                                 사원                            부서번호   부서명    사원이름
부서번호   사원명                     사원 이름   부서번호              A001     생산부     김윤환
A001      생산부       INNER JOIN     김윤환      A001         =>     A001      생산부    장기영
A002      자재부                      장기영      A001                A002      자재부    김옥분
A003      인사부                      김옥분      A002

- 4. INNER JOIN 의 종류
= 1. THETA JOIN (세타 Join)
  -> 1. 다양한 Join 조건을 세타(Theta : Θ) 연산자(비교 연산자) 를 이용하여 표현할 수 있는 것
  -> 2. Θ 연산자로 이용될 수 있는 비교 연산자들 : >, <, >=, <=, <>

= 2. THETA JOIN 표기 방법
  -> 1. Relation A 의 속성 a 와 Relation B 의 속성 b 를 연산자 조건으로 Theta Join 하는 경우
     => A ▷◁ a Θ b B 로 표기
        --> EQUI JOIN (동등 Join) : Theta Join 의 Θ 연산자 조건이 `=` 인 경우
        
  -> 2. EQUI JOIN
     => 1. '=' (equal) 비교를 이용하는 JOIN
     => 2. JOIN 속성이 두 번 표기됨 (학술적 의미로 사용, 실제 거의 사용 X)
     
  -> 3. Non-EQUI JOIN
     => '=' 조건 아닌 나머지 비교 연산자 (<, <=, >=, >, <>) 를 사용하는 JOIN

3. OUTER JOIN (외부 JOIN)
- 1. Join 되는 A Table 에서 B Table 에 연결되는 Column 값이 존재하지 않더라도 (즉, NULL 값) A Table 들의 Data 를 가져올 수 있는 JOIN 방법

