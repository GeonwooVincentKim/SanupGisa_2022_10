I. SQL (Structured Query Language) 특징
1. 관계대수, 관계해석을 기초로 한 고급 Data 언어
2. 대화식 질의어, Data 정의, 조작, 제어 기능 제공
3. COBOL, C, PASCAL 등의 언어에 삽입 -> 내장 SQL
4. DBMS 에서 사용되는 비절차적 대화형 Language

** 절차적 언어
- 1. Program 언어와 같이 기본적인 절차가 있는 언어
- 2. public static void main(String[] args) {}

** 질의어, Query
- 정보 수집에 대한 요청에 쓰이는 Data 언어

5. 구분
- 1. DDL (CREATE, ALTER, DROP)
- 2. DML (SELECT, INSERT, UPDATE, DELETE)
- 3. DCL (GRANT, REVOKE, COMMIT, ROLLBACK)


II. DDL
1. Domain, Table, View, Index 정의, 변경, 제거하는 언어
2. DDL 로 정의된 내용은 Meta Data 가 되며, System Catalog 에 저장
3. Meta-Data -> Data 에 대한 Data => 성별은 문자로 2자리, '남' or '여' 만 입력 가능

4. Domain
- 1. 도메인 무결성, 반복되는 Data Type 을 사용자 정의 Data Type 으로 정해서 효율적으로 사용 가능
- 2. DEFAULT -> 기본 값, 입력안했을 때 자동으로 입력되는 값
- 3. CONSTRAINT -> DB 에 저장된 Data 의 정확성 보장, 정확하지 않은 Data 가 DB 에 저장되는 것 방지 (제약조건 지정)
- 4. 예시

// 여기서 GENDER 는 사용자 정의 Data Type (Domain)
CREATE DOMAIN GENDER CHAR(2)
DEFAULT '남'
CONSTRAINT GENDER_ck CHECK (GENDER='남' OR GENDER='여')

5. Table
- 1. 기본 키는 NOT NULL, UNIQUE 로 자동 설정됨
- 2. UNIQUE 무결성 -> 해당 속성은 유일해야 함 (이름 중복 X)
- 3. NULL 무결성 -> 해당 속성은 Null 값을 가질 수 없음 (Null X)
- 4. FOREIGN KEY ~ REFERENCES
  = 1. ON DELETE [UPDATE] CASDADE -> 부모 Table 이 수정/삭제되면 관련된 자식 Table 들도 연쇄 수정/삭제
  = 2. ON DELETE [UPDATE] SET NULL -> NULL 이 됨
  = 3. ON DELETE [UPDATE] SET DEFAULT -> DEFAULT 가 됨
  = 4. 무 옵션 -> 실행 X

- 5. 예시

CREATE TABLE 학생 (
  학번 CHAR(18) PRIMARY KEY,  --> 또는 학번 CHAR(18) ... PRIMARY KEY(학번)
  이름 CHAR(18) NOT NULL,
  학과코드 CHAR(10),
  성별 GENDER,
  생년월일 DATE,
  UNIQUE(이름),
  FOREIGN KEY(학과코드) REFERENCES 학과(학과코드),
  CHECK (생년월일 >= '1974-05-01')
);

6. View
- 1. 학생 Table 에서 조회가 빈번하게 발생하는 이름, 성별 (여학생) 을 View 로 정의해서 System 성능 향상
- 2. SELECT ~ FROM ~ WHERE 문 = sub-query 또는 부속질의
- 3. WITH CHECK OPTION -> View 에 대한 수정, 삽입 연산 실행 시, WHERE 절 조건 위배될 경우 실행 거부
- 4. 예시

CREATE VIEW 여학생_view (이름, 성별) AS
    SELECT 이름, 성별   
    FROM 학생
    WHERE 성별 = '여'
    WITH CHECK OPTION;
    
7. INDEX
- 1. 자동으로 기본 키가 Index 로 정의됨
- 2. UNIQUE -> Index 로 정의되는 속성 값이 중복 X (생략 시 중복 허용)
- 3. 정렬 -> ASC (오름차순, 생략 시), DESC (내림차순)
- 4. CLUSTER -> Clustered Index 생성 시, 물리적으로 Data 정렬 (기본 오름차순, 내림차순),
  = 1. Non-Clustered Index 보다 검색 속도 빠름 (물리적으로 인접)
  = 2. 한 Table 에서 하나의 Clustered Index 만 생성 가능

- 5. Index 정의하면 Table 검색 속도 증가, 수정, 삽입 시 수행 속도가 느려질 수 있음 -> 기억공간 낭비
- 6. 예시

CREATE UNIQUE INDEX 이름_idx
ON 학생(이름 ASC)
CLUSTER;

** Index
- 1. 검색을 빠르게 하기 위해 만든 보조적인 Data 구조
- 2. CLUSTER 옵션 생략 가능

8. ALTER TABLE
- 1. Table 구조 변경 -> 속성 변경
- 2. ALTER -> MS-SQL, MODIFY -> ORACLE
- 3. 예시

ALTER TABLE 학과 ADD 연락처 CHAR(18); --> 새로운 속성 추가
ALTER TABLE 학과 ALTER 학과명 SET DEFAULT '정보'; --> 기본 값 변경
ALTER TABLE 학과 DROP 학과명; --> 속성 제거

9. DROP TABLE
- 1. 참조 무결성 위배 피하기
  = 1. CASCADE -> 참조하는 Table 연쇄적 제거
  = 2. RESTRICT -> 참조하는 Table 있을 경우 제거 안 됨 (생략 가능)
    -> DELETE, UPDATE 명령어 옵션 사용 가능

- 2. 예시

DROP TABLE 학과 CASCADE;


10. INSERT
- 1. INSERT INTO 수강생 VALUES ('김길현', '정보', '남구', 100); --> 수강생 Table 에 김길현, 정보, 남구, 100 을 넣어라
- 2. INSERT INTO 수강생(이름, 수강생) VALUES ('이상인', 120); --> 수강생 Table 에 이름, 수강료에 이상인, 120을 넣어라
- 3. INSERT INTO 정보수강생 (이름, 과목, 수강료)
   SELECT 이름, 과목, 수강료 FROM 수강생 WHERE 주소 = '남구';
   --> 수강생 Table 에서 주소가 남구인 이름, 과목, 수강료를 SELECT 해서 정보수강생 Table 속성인 이름, 과목, 수강료에 넣어라

11. SELECT
- 1. SELECT * FROM 수강생 WHERE 이름 LIKE '김%'; --> 수강생 Table 에서 이름이 '김'으로 시작하는 모든 Tuple 검색
  = 1. '%' <모든 문자 대표>
    -> 1. '김%' --> '김'으로 시작
    -> 2. '%김' --> '김'으로 끝남
    -> 3. '%김%' --> '김'이 중간에 포함되어 있음
  
  = 2. '_' <문자 하나 대표>
  = 3. '#' <숫자 하나 대표>

- 2. SELECT * FROM 수강생 WHERE 수강료 BETWEEN 30 AND 90; --> 수강생 Table 에서 수강료가 30 이상 90 이하인 모든 Tuple 검색
- 3. SELECT * FROM 수강생 WHERE 과목 IS NULL; --> 수강생 Table 에서 과목이 NULL 인 모든 Tuple 검색
- 4. 확장 구조
  = 1. DISTINCT -> 중복 배제
  = 2. GROUP BY -> 그룹별 검색
  = 3. ORDER BY -> 정렬 검색
  
  SELECT [DISTINCT] 속성
  FROM Table
  [WHERE 조건]
  [GROUP BY 속성 [HAVING 조건]]
  [ORDER BY [ASC | DESC]];
  
** TOP
- 1. ORDER BY 에 정렬된 순서에서 검색되는 Tuple 수
- 2. ex -> TOP 10 : 10개 Tuple 만 검색

** DISTINCTROW
- 1. 모든 Tuple 값을 기준으로 중복 배제
- 2. 검색할 속성과 무관

** ALL
- 제한 없이 모두 검색 (일반적으로 생략)

- 5. 집계함수
  = 1. COUNT(속성) : Group 별 Tuple 수
    -> 1. COUNT(*) -> Tuple 건수 => NULL 포함
    -> 2. COUNT(속성명) -> Tuple 건수 => NULL 제외
    -> 3. COUNT(DISTINCT 속성명) -> NULL, 중복 제외된 건수 현황

  = 2. AVG(속성) : Group 별 평균
  = 3. SUM(속성) : Group 별 합계
  = 4. MAX(속성) : Group 별 최대값
  = 5. MIN(속성) : Group 별 최소값
  = 6. STDDEV(속성) : Group 별 표준편차
  = 7. VARIAN(속성) : Group 별 분산

SELECT * FROM  수강생 WHERE 과목 = '정보' ORDER BY 이름 DESC;
--> 수강생 Table 에서 과목이 '정보'인 Tuple 검색하되, 이름을 기준으로 내림차순 정렬

SELECT 과목, COUNT(*) AS 수강생수 from 수강생 WHERE 수강료 >= 100 GROUP BY 과목 HAVING COUNT(*) >= 2;
--> 수강생 Table 에서 수강료가 100 이상인 과목을 수강생이 2명 이상인 수강생수를 검색
