I. Source Code Build 과정의 이해
1. 정의 -> 실행할 수 있는 제품 S/W 로 변환하는 과정 (결과물), Programming 언어 유형에 따라 Build 과정 다름
2. Compile 언어 (C, C++ 등)
- 1. 전체 번역하여 실행, 가장 속도 빠르고 보안에 유리
- 2. Compile 과정 통해 Build 작업 수행 -> Build 과정 오래 걸림
- 3. Build 과정
    |- Source Code
    ↓
  = 1.전처리기 (PreProcessor) -> Compile 직전 사전 처리 위해 먼저 실행 (#include)
    |
    ↓
  = 2. 구문 분석 (Parser) -> 문장 해석 (문법 검사 등)
    |- Parse Tree
    ↓
  = 3. 번역 (Translation)
    |- Assembly
    ↓
  = 4. 어셈블러 (Assembler) -> 어셈블리어로 작성된 Program, 기계어로 된 목적 Program 으로 번역
    |- 목적파일
    ↓
  = 5. Linker -> 하나 이상의 목적 File 을 가져아 단일 실행 Program 으로 병합
    |- 실행파일 (Exe File)
    ↓
  = 6. Loader -> 실행하고자 하는 Program 찾아 주기억장치 적재, Program 실행파일
    |
    ↓- 실행 결과

3. Byte Code 언어 (Java, C# 등)
- 1. Compile 결과물 'class' 라는 Byte Code File 로 생성되고, 가상 실행 환경 (JRE, CLI) 에서 한 줄씩 실행하는 방식으로 Build
- 2. JRE, CLI 에서 실행될 때 기계어로 변환, Compile 언어에 비해 Build 과정 빠름

** JRE (Java Runtime Environment, Java 실행 환경, JVM)
- Java Program 이 모든 OS 에서 별도 수정과정 없이 실행될 수 있도록 하는 환경

** CLI (Common Langauge Infrastructure, 공통 언어 Infra)
- 1. MS 사가 개발한 실행 Code 와 Runtime 환경 Open 규격
- 2. 모든 OS 에서 별도 수정과정 없이 실행될 수 있도록 하는 Open 규격

4. Interpreter 언어 (JS, Python, Ruby 등)
- 1. 한 줄씩 번역되어 실행
- 2. Compile 과정에서 Memory 가 훨씬 적게 소모, 빠른 시간에 Compile 가능


II. Build 도구
1. 정의 -> Source 에 대한 Build 및 Deploy 지원, Project 사용 구성 요소, Library 들에 대한 의존성 관리 지원도구
2. Build 도구 종류
- 1. Ant (Another Neat Too)
  = 1. JAVA, 자동화된 S/W Build 도구
  = 2. make 와 비슷, Java 로 구현 -> JAVA 실행환경이 필요

- 2. Maven
  = 1. JAVA 기반 Project Build, 구성 요소 및 Library 의존성 관리
  = 2. POM File (pom.xml) 만으로 쉽게 구성 가능
  = 3. CoC (Convention over Configuration) 개념, 관례적인 Project Folder 구조 사용

** Build -> Source Code File, Compile 된 File 들을 Computer 에서 실행 가능한 제품 S/W 로 변환하는 과정 (결과물)
** make -> UNIX 계열 OS, 주료 사용되는 Program Build 도구
** POM (Project Object Model) 
- 1. Project 다양한 정보 처리하기 위한 객체 Model
- 2. pom.xml -> Project 중요 정보 정의하고 정리한 File

** Convention Over Configuration (CoC, 설정보다 관례, 설정보다 관습, 구성보다 관습)
- 1. 수 많은 결정들 줄여 단순성 확보, 유연성 잃지 않도록 S/W Design 패러다임
- 2. Maven CoC 
  = 1. Source Code 는 /src/java, Test Code 는 /src/test 에 생성
  = 2. 저장 폴더 알아서 설정해줌, 사용자가 할 일 없음

- 3. Gradle -> Android App 개발 환경, Groovy 기반 DSL (Domain Specific Language) 사용
- 4. Jenkins
  = 1. Servlet Container 에서 실행되는 Server 기반 도구
  = 2. Build, Deploy 등 반복되는 작업에 사용되는 CI 도구
  = 3. 쉬운 UI 제공, 동시 Build 제공

** Servlet Container -> Client 요청처리, Server 측 실행되는 작은 Program, Servlet 생명주기 관리하는 역할
** Servlet -> Web 기반 요청에 대한 동적인 처리 가능한 Java Program
** Groovy -> JAVA <- Python + Ruby, Smalltalk 등 장점 결합 = 동적 OOP
** DSL (Domain Specific Language, 도메인 특화 언어)
- HTML 과 같이 특정 Domain 에 특화된 Computer 언어

** CI (Continuous Integraion, 지속적인 통합)
- 1. Code 초기에 그리고 자주 통합 -> 통합 시 발생하는 여러 가지 문제점들을 조기에 발견
- 2. 피드백 Cycle 짧게 -> S/W 개발 품질, 생산성 향상

- 3. CI 효과
  = 1. 흔히 발생하는 일반적인 위험 줄여줌
  = 2. Error 를 초기에 발견 가능, Error 발생하는 범위 좁고, Error 잡는 것이 수월해짐
  = 3. 잘 동작, Error 거의 없는 S/W 유지 가능
  = 4. 언제나 배포 가능한 S/W 생성
  = 5. 반복적인 수작업 줄여주고, Project 가시성 좋게 해줌
  = 6. 개발 팀이 S/W 제품에 대해 보다 큰 자신감 가지게 함

- 4. CI 특징
  = 1. Source Code 일관성 유지 -> Source Code 관리 System 필요
  = 2. 자동 Build -> Build 는 CI 툴에 의해 자동으로 이루어짐
  = 3. 자동 Test -> Source 검증과 함께 기능/비기능 Testing 매번 경험, Code 품질 높일 수 있음
  = 4. 일일 Checkout, Build
    -> Build 주기 ↑, 개발자 Source 오류 ↑, 시간 낭비 ↑
  
** CD (Continuous Delivery, 지속적인 Deploy)
- 1. Team 짧은 주기로 S/W 개발, S/W 공학적 접근의 하나
- 2. 증분 (증가된 Data) Update -> 업무 Application 에 적용
- 3. 변경사항의 배포에 대한 비용, 시간, 위험 줄일 수 있게 됨


III. IDE (Integrated Development Environment, 통합 개발 환경)
1. 정의 -> Coding, Debug, Compile, Build, Deploy 등 Program 개발 관련된 모든 작업을 하나의 Program 안에서 처리하는 환경을 제공하는 S/W
2. 대화형 Interface 제공 -> Compiler + Text Editor + Debugger
3. 종류
- 1. Eclipse - IBM Eclipse 재단 - (MS-Windows, Linux, OSX -> Cross Platform) - (Java, C, C++, PHP, JSP 등)
- 2. VS - MS - MS-Wndows - (Basic, C, C++, C#, .net 등)
- 3. X Code - Apple - MacOS - (C, C++, Object-C, Java 등)
- 4. Android Studio - Google - (Windows, Linux, MacOS) - (Java, C, C++)
- 5. Lazarus - Lazarus Team - (MS-Windows, Linux, OS X 등) - (Pascal)
- 6. IDEA - JetBrains (이전 IntelliJ) - (Windows, Linux, MacOS) - (Java, JSP, XML, Kotlin, PHP 등)
- 7. C++ Builder - Embarcadero Technologies - MS-Windows - (C, C++)
- 8. J Builder - Embarcadero Techonologies - MS-Windows - Java

4. IDE 도구 주요 기능
- 1. Code 작성 및 실행 자동화 기능
  = SW 코드 (Source Code) 자동 생성 및 작성 가능, 작성된 Code 실행이 가능한 자동화 기능 제공
 
- 2. Visual 한 Debugging 제공 기능
  = SW 코드 (Source Code) 실행 및 Test, 식별된 오류를 수정할 수 있는 자동화 도구 (시각화) 기능 제공
  
- 3. SW 형상관리 (SCM) 와 연동 기능
  = 제품(Product), 배포(Release) 버전, 버그 추적, 기능 목록 관리 기능 제공하는 SCM 과 연동 -> 개발에 필요한 정보의 공유 기능 제공
  

IV. Build Schedule 관리 독
1. 정의 - Build Script 를 정해진 조건, 시간에 기동
2. Anthill, CruiseControl, Hudson 등
3. 구성
- 1. 별도의 Web Application 으로 구성되어 Web Server 상에 배포
- 2. 관리자 화면, Build Script, 형상관리 도구 등과 연계
- 3. Email 통해 관련 개발자, 관리자들에게 Build 수행 결과 제공'

4. 기능
- 1. Build 작업 Scheduler -> Build 작업의 작업 주기, 작업 시간 설정
- 2. Build 작업 상태 및 이력관리 -> 대기 중, 진행 중, 완료, 오류 유형으로 구분하여 관리, 수행 이력 기록
- 3. Build 도구 연계 관리 -> Build 작업 수행, 작성된 Build Script, 접근 가능한 형상관리 도구를 연계 설정
- 4. Build 수행 결과 Reporting -> Build 수행 결과 오류 사항, Code Inspection 점검 결과, Test 수행 결과 등 Web 화면 표시, 관련자 공유 가능한 Reporting 제공


IV. Application 배포 (Release)
1. 정의 -> Application 을 실행 및 Test 할 수 있도록 Compile 된 Program, Resource 를 Server 상 적합한 위치로 이동하는 작업
2. Application 배포 단위
- 1. 다양한 단위로 묶음 Packging 을 통해서 배포 가능
- 2. Jar (Java Archive)
  = 1. Java Library, Resource (Class, Image, 환경 설정 File 등), property 파일 포함
  = 2. Java Application 동작할 수 있도록 Java Project 를 압축한 File
  = 3. java file, class File, resources
  = 4. Program 참조 Library, 구현된 Business Service 배포 시, jar 단위로 Packging 하여 배포

- 3. War (Web Archive)
  = 1. Servlet / JSP Container, 배치 가능한 Web Application 압축 File Format
  = 2. Servlet, jar File, WEB-INF Folder 에 있는 web.xml File 로 구성
  = 3. Web Container 상에 배포, 독립적 Web Application Service 제공 가능

- 4. ear (Enterprise Archive)
  = jar + war => 하나의 완성된 Web Application Service 제공 가능

** Byte Code -> 고급 언어 Source Code, VM 이 이해할 수 있는 언어로 변환된 중간 Code
** property File -> 자주 변경되지 않는 Data 를 저장한 파일 (ex -> DB 접속 관리자 ID = admin)
** WEB-INF Folder -> Web Application 실행하는데 필요한 Class File, 설정 File 저장되는 Folder
** web.xml File -> Web Application 에 대한 전반적인 설정 정보를 저장하고 있는 File
