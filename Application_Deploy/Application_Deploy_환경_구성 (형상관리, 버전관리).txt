I. 형상 관리 (SCM; Sofeware Configuration Management)
1. 정의 -> S/W 개발 과정에서 발생하는 산출물 변경 사항을 버전 관리하기 위한 일련의 활동
2. 특성
- 1. S/W 변경 사항 파악 및 제어, 적절히 변경되고 있는지 확인하여 해당 담당자에게 통보
- 2. Project 생명주기의 전 단계에서 수행하는 활동, 유지 보수 단계
- 3. S/W 개발 전체 비용 줄이고, 여러가지 문제점 발생 요인이 최소화되도록 보증

** 형상 -> 사물의 생긴 모양이나 상태
** 형상 항목
- 1. 형상 관리 대상이 되는 형상
- 2. S/W 공학 기반 표준과 절차 -> 방법론, WBS, 개발 표준
- 3. S/W Project 계획서, S/W 요구사항 명세서
- 4. S/W 아키텍처, 실행 가능 Prototype, S/W 화면, Program 설계서
- 5. DB 기술서 -> Schema, File 구조, 초기 내용
- 6. Source Code 목록 및 Source Code
- 7. 실행 Program, Test 계획, 절차, 결과
- 8. System 사용 및 운영과 설치에 필요한 매뉴얼
- 9. 유지 보수 문서 -> 변경 요청서, 변경 처리 보고서

3. 형상 관리 활동 -> Version 관리, 배포 관리, 변경 관리
4. 형상 관리 절차
- 1. 형상 식별 -> 변경 제어 -> 상태 보고 -> 형상 감사
- 2. 형상 식별 -> 계층 (Tree) 구조로 구분, BaseLine (요구사항 기준선) 의 기준을 정하는 활동

** S/W 형상 특징
- 지속적으로 변하는 설정 있음, 변경의 이정표가 되는 BaseLine 을 설정, 변경 이력 관리하여 추적, 통제 가능하도록 함

- 3. 변경 제어 (=형상 통제) 
  = 1. 변경 요구 검토, 승인하여 적절히 통제, 현재 BaseLine 에 잘 반영될 수 있도록 조정하는 작업
  = 2. 적절한 형상 통제 -> 형상통제위원회 승인을 통한 통제

- 4. 형상 상태 보고 (기록) -> BaseLine 현재 상태 및 변경 항목들이 제대로 반영되는지 여부를 보고, 보고서 작성
- 5. 형상 감사 -> BaseLine 의 무결성 평가하기 위해 확인, 검증 과정 -> 공식적으로 승인


II. 형상관리 System 에서 사용하는 언어
1. 형상 관리 (Configuration Management)
- 1. 계획부터 개발, 운영, 유지보수, 폐기까지 발생하는 모든 활동을 지속적으로 관리
- 2. 식별 표시를 붙여 추적 가능하게 만들고, 형상항목들에 대한 변경 제어하고 관리하는 Process 필요

2. 형상 항목 (Configuration Item)
- 1. 형상관리 대상이 되는 형상 (항목)
- 2. 유일한 식별자 부여, 개발적으로 관리되는 Source File, 문서, 기타 사항

3. 베이스라인 (BaseLine, 기준선, 변경 통제 시작)
- 1. 공식적으로 검토되고 협의되어 향후 기준이 되는 형상 항목의 집합체
- 2. `기준선 -> 변경 통제 도와줌`, 정식적인 변경 통제 절차 통해서만 변경 가능

4. 마이그레이션 (Migration)
- 개발 완료된 System 운영 단계로 전환, 관련 Source File 을 Repository (저장소) 로 이관

5. Repository (저장공간, 저장소)
- 저장공간, File 의 현재 버전과 변경 이력 정보를 저장하는 저장소

6. 워크플로 (Workflow)
- 1. 미리 정해진 절차가 형상관리 System 안에 구현
- 2. Git 의 Workflow (Git 을 사용한 협업 방법
  = 1. Centralized Workflow (중앙 저장소 사용)
  = 2. Feature Branch Workflow (기능별 Branch)


III. 제품 S/W 버전 관리
1. 정의 -> SW 개발, Code 와 Library, 관련 문서 등 시간 변화에 따른 변경을 관리하는 전체 활동
2. 버전 관리 주요 용어
- 1. 저장소 (Repository) -> 파일 현재 버전, 변경 이력 정보 저장
- 2. 가져오기 (Import) -> 버전 관리 되지 않은 Repository 에 Local Directory File 을 처음으로 복사
- 3. Check Out -> Program 수정, Repository 파일 받기
- 4. Check In -> Program 수정 후 Repository 에 새로운 버전으로 갱신
- 5. 갱신 (Commit) -> 갱신 사항 있으면 충돌 (Conflict) 알림, Diff 도구 이용 수정, Commit 수행
- 6. 동기화 (Update) -> 자신의 작업 공간을 Repository 의 최신 버전으로 동기화

** Diff 도구 -> 파일 내용 비교하여 서로 다른 부분을 찾아 주는 도구
** CVS (형상관리 도구)
- 중앙 집중형 서버 저장소를 두고 Client 가 접속해서 Version 관리 실행

3. 작업 단계별 버전 등록 기법
- 1. 가져오기 (Import) 또는 추가 (Add)
  = 개발자가 신규로 어떤 파일을 저장소 (Repository) 에 추가

- 2. 인출 (CheckOut) -> 추가되었던 파일을 개발자가 인출 (Check-Out)
- 3. 예치, 커밋 (Commit)
  = 개발자가 인출된 파일 수정, 저장소에 예치 (Commit) 하면서 설명 붙임

- 4. 동기화 (Update)
  = 1. Commit 작업 후, 새로운 개발자가 자신 작업공간을 동기화 (Update)
  = 2. 기존 개발자가 추가했던 File 이 전달
  
- 5. 차이 (Diff)
  = 파일 수정 기록 확인, 추가한 파일과 이후 변경된 파일의 차이 (Diff) 확인


IV. 버전 관리 (Version Control, Revision Control) 도구
1. 정의 -> 버전 관리 도구, 현업에서 다양한 방향으로 버전 관리 진행
2. 버전 관리 도구 사용 시 유의 사항
- 1. 효율적인 버전 도구 관리-> 다양한 기능 활용, 지속적인 버전 관리와 버전 관리 기준
- 2. 버전 관리 도구 사용 관련, 문제 발생 시 해결 매뉴얼 사전 준비 필요
- 3. 제품 S/W 기능 작을수록 적절히 조정
- 4. 버전 관리 항목 정하고, 변경 사항은 공식적인 합의에 의하여 실시
- 5. 배포 후 수정 중인 SW 의 버전 관리 도구 사용은 신중하게 진행


V. 방식에 따른 버전 관리 독
1. 공유 폴더 방식 (RCS, SCSS) 등
- 1. 개발 완료 파일은 약속된 위치의 공유 폴더에 복사
- 2. 담당자 한 명, 매일 공유 폴더의 파일 복사 후, 컴파일 -> Error 확인과 정상 동작 여부 확인
- 3. 정상 동작 -> 개발자들이 동작 여부 다시 확인

2. Client / Server 방식 (CVS, SVN 등)
- 1. 중앙에 Version 관리 System 이 항시 동작
- 2. 개발자들의 현재 작업 내용, 이전 작업 내용 축적 용이
- 3. 서로 다른 개발자가 같은 File 작업 시, 경고 출력
- 4. Trac 과 같은 GUI Tool 이용, 모니터링 가능

** Trac (트랙)
- Open Source Web 기반 Project 관리 겸 버그 추적 등

3. 분산 저장소 방식 (Git, Bitkeeper 등)
- 1. Local 저장소, 원격 저장소
- 2. 원격 저장소에서 Local 에 Clone -> 개발자 자신 만의 Local 저장소 생성
  = git clone 원격저장소경로

- 3. 개발 완료한 파일, 수정 이후 Local 저장소 Commit, 다시 원격 저장소에 반영 (Push)


VI. 버전 관리 도구 종류
1. CVS (Concurrent Versions System)
- Server, Client 구성, 다수의 인원이 동시 접근 => Client 가 Eclipse (구현 도구, IDE 도구) 에 내장

2. Subversion (서브버전, SVN)
- GNU 버전 관리 System, CVS 장점은 이어받고 단점은 개선, 2000년 발표 -> 업계 표준

** GNU
- 1. 자유 S/W 재단 (Free Software Foundation) 의 종합적인 Project
- 2. 정보를 돈으로 주고 구입하는 것을 반대

** Trunk (나무 몸통, Main) -> 가장 최신의 Source
** branch (나뭇 가지, 분기) -> 다른 방향으로 개발하는 Source (Main 에서 뻗어진 가지)
** tag (꼬리표) - 이전 버전 Source 보관
** Trunk Directory, Branch Directory -> Trunk Directory 와 병합 (Merge)

- 3. RCS (Revision Control System)
  = CVS 와 달리 Source File 수정을 한 사람만으로 제한, 다수 사람이 File 동시 수정 불가하도록 File 잠금

- 4. Git
  = 1. Version Control 을 하는 BitKeeper 대체
  = 2. 속소 중점 분산형 Version 관리 System (DVCS), 대형 Project
  = 3. Commit 은 Local 저장소에서 이루어 지고, push 로 원격 저장소애 반영
  = 4. Pull, Fetch -> Server 변경된 내역 받아오기 가능
  = 5. GNU 일반 공중 사용 허가서 v2 하에 배포되는 자유 S/W
  = 6. 파일의 변화를 Snapshot 으로 저장
  
** GNU GPL v2.0
- 파생된 Program 역시 같은 CopyLeft [Copy Right (지적 소유권) 와 반대, 공유] 를 가져야 하는 의무 조항 포함
