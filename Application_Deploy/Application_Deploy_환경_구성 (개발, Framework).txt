I. 개발환경 구축
1. 정의 
- 1. Project 목적과 구축 설계에 대한 명확한 이해가 필요, H/W, S/W 의 선정
- 2. ex) 사진 편집 = Computer + Photoshop

2. 일반적으로 사용되는 System 환경
- 1. Program 개발 -> 개발 환경
- 2. Test -> Test 환경
- 3. System 운영 -> 운영환경 & 백업환경


II. 개발 S/W 환경
1. System S/W
- 1. 운영체제 (OS; Operation System)
  = Windows, Linux, UNIX (HPUX, Solaris, AIX) 등
  
- 2. JVM (Java Virtual Machines)
  = Java 관련 응용 프로그램을 기동하기 위한 Interpreter 환경, 동일 버전 적용하는 것이 좋음

** JVM (Java Virtual Machine)
- Java 로 작성된 응용 Program (Java ByteCode), Windows, Unix 와 같은 Computer 운용체계서 원활히 운용, S/W

- 3. Web Server
  = 1. 정적 Web Servivce, MiddleWare, 정적 파일 제공
  = 2. Apache HTTP Server, IIS, 엔진x, GWS

** Web Server 기능
- 1. HTTP/HTTPS Request, Response 처리
- 2. HTML, CSS, JS, Image 등 정적 파일 저장/관리
- 3. 사용자 인증 (Authentication)
- 4. 하나의 Server, 여러 Domain 이름 연결하는 가상 호스팅 (Virtual Hosting)
- 5. 처리한 요청들을 Log File 에 기록
- 6. 응답 속도 (대역폭) 를 제한

** HTTPS (HyperText Transfer Protocol over Secure Socket Layer) -> HTTP 보안 강화된 버전
** CSS (Cascading Style Sheets)
- HTML, XML 등 Markup 언어, Layout, 구성 요소들의 Style 담당하는 언어

- 4. WAS (Web Application Server)
  = 1. Web Server + JSP / Servlet Application 수행을 위한 Engine
  = 2. Apache Tomcat, IBM WebSphere, Oracle WebLogic
  
** Servlet
- 1. Web Page 동적 생성, Server 측 Program
- 2. Servlet Class -> Java Logic 처리, Controller Page

** JSP (Java Server Pages)
- 1. HTML 내 Java Code 삽입, Web Server 에서 동적, Server 측 Script 이며 다양한 운영체제에서 사용 가능
- 2. JSP File -> Java 화면 처리, View Page

** 사용자 Web Browser 요청하는 경우
- 1. Web Server -> 정적 Data (Image, JS 등) 처리, WAS 동적 Contents (DB 접속, 외부 System 연동) Service 요청
- 2. Server 자원 효율적으로 처리

** HTTP Server
- 1. URL Request, 미리 Mapping 되어 있는 Content, Response 형태로 전송
- 2. Servlet Class 또는 JSP File -> HTTP Server 는 Web Container 에서 처리하도록 Client 요청 넘겨줌

- 5. DBMS (Database Management System) -> Data 저장, 관리를 위한 DB S/W

2. 개발 S/W
- 1. 요구사항 관리 도구
  = 1. 목표 System 기능, 제약 조건 등 고객 요구사항 수집, 분석, 추적
  = 2. IBM Rational DOORS (Data Object Oreient Repository System), JIRA, inteGREAT, Trello, Reqtify

- 2. 설계/Modeling 도구
  = 1. 기능 논리적 통합 -> 통합 모델링 언어 (UML; Unified Modeling Language) 지원, DB 설계 지원 => 설계 및 Modeling 지원하는 도구
  = 2. StarUML, ArgoUML, PlantUML, DB Designer 등
  
** UML (Unified Modeling Language)
- 객체 지향 분석 / 설계용의 Modeling 언어, 산출물들을 Visual 하게 제공, 개발자, 고객 간 상호 의사소통 원할 가능하게 하는 Modeling 표기법

- 3. 구현 도구 -> 구현 및 개발, Eclipse, VS, IntelliJ IDEA, NetBeans, node.js

** Debugging -> Debug, Debugging 은 Computer Program 논리적인 오류(Bug) 를 찾아 수정하는 과정
** Debugger -> Debug 돕는 도구, 코드 중단점 지정, Program 실행 중단, Code 단계적으로 실행하여 값 확인

** 개발언어 선정 기준
- 1. 적정성 -> System, 응용 Program 의 목적에 적합
- 2. 효율성 -> 노력에 비해 훌륭한 결과 얻을 수 있는 기능 => Programming 효율성
- 3. 이식성 -> 일반적인 PC 및 OS 에 개발환경이 설치 가능해야 함
- 4. 친밀성 -> Programmer 의 언어 이해 및 사용
- 5. 범용성 -> 과거 개발 실적 및 사례 존재, 광범위한 분야에 사용
- 6. 기타
  = Algorithm, 계산상 난이도, S/W 수행 환경, 자료 구조 난이도, 개발 담당자 경험과 지식
  
- 4. Build 도구
  = 1. Source 에 대한 Build 및 배포 지원, Library (필요한 프로그램을 모아 놓은 집합체)
  = 2. Maven, Ant, Gradle

** Build -> Source Code File 을 실행가능한 File 로 만드는 일련의 과정

- 5. 형상관리 도구
  = 1. 변경사항 버전별로 관리, System 품질 향상 지원하는 도구
  = 2. CVS, Subversion, Git, Mercurial

** 형상 관리 -> S/W 생산물 (Program, 문서, Data 등) 확인, S/W 통제, 변경 상태 기록

- 6. Test 도구 -> 요구사항에 적합하게 구현되어 있는지 Test 지원, Spring Test, CppUnit, JUnit, HttpUnit


III. 개발 H/W 환경
1. Client 환경 구성
- 1. 사용자와의 Interface 를 제공하는 H/W
- 2. PC, Web Broswer 화면, 핸드폰 (모바일 App)

2. Server 환경 구성
- 정적 파일 (HTML, CSS, Image) 들을 제공하는 Web Server Application 이 설치되는 H/W

3. WAS (Web Application Server) -> 동적 Server 콘텐츠 수행
4. DB Server -> DB 설치되는 H/W
5. File Server -> Service 제공을 위해 File 저장, 공유하기 위한 File 저장 H/W


IV. 프레임워크 (Framework)
1. 정의 -> 뼈대, Class 나 Interface 등을 모아둔 집합체
2. 특징
- 1. 모듈화 (Modularity) -> 캡슐화를 통해 모듈화 강화, 설계와 구현 변경에 따르는 영향 최소화
- 2. 재사용성 (Reusability) -> 반복적으로 사용할 수 있는 Component 정의, S/W 품질 향삭 및 개발자 생산성 증대
- 3. 확장성 (Extensibility) 
  = 1. 다형성 (Polymorphism) 을 통한 Framework 의 Interface 확장
  = 2. Framework 를 Application 의 가변성으로부터 분리 -> 재사용성 이점

- 4. 제어의 역흐름 (Inversion of Control)
  = 1. Framework Code 가 전체 Application 의 처리 흐름 제어
  = 2. Framework 로부터 Application 으로 거꾸로 흐르게 함
  = 3. 객체들의 제어 권한을 Framework 에 넘겨 생산성 향상


V. S/W 개발 Framework
1. 정의 
- 1. 공통적으로 사용되는 구성 요소와 아키텍처를 일반화
- 2. S/W 구성에 필요한 기본 뼈대 제공
- 3. 개발 및 운영 지원하는 도구 및 가이드

2. 종류
- 1. Spring Framework -> Java Open 경량형 Application Framework, 전자정부 표준 Framework 
- 2. 전자정부 Framework -> 공공부문 정보화 사업, 특정 업체의 종속성 배제, 사업별 공통 Component 중복 개발 방지
- 3. .NET Framwork -> Windows Program 개발 및 실행환경 제공, MS 에서 개발

** S/W 아키텍처 (S/W Architecture)
- S/W 구성요소 중 외부에 드러나는 요소 특성과 요소들 간 관계 표현


VI. Server 개발 Framework
1. 정의
- 1. 다양한 Network 설정, 요청 및 응답처리, 아키텍처 Model 구현 쉽게 처리 -> Class, Interface 제공하는 System
- 2. MVC Pattern (모델-뷰-컨트롤러)

** MVC (Model View Controller)
- Model, View, Controller 으로 분리, 서로 영향 받지 않고 개발 가능한 S/W Architecture

2. 종류
- 1. Spring -> JAVA, 전자정부 표준 Framework 기반 기술
- 2. Node.js -> JavaScript, 비동기 입출력 처리, Event 위주의 높은 성능 => 실시간 입출력 많은 Application 에 적합
- 3. Django -> Python, Component 재사용과 Plug-In 제공
- 4. Ruby On Rails -> Ruby, DB 작업 단순화 및 자동화, Test 위한 Web Server 지원
- 5. Codeigniter (코드이그나이터) -> PHP, Interface 간편, Server 자원 적게 사용

** Plug In (추가 기능)
- 1. 추가 Program 설치, 특정 기능 수행할 수 있도록 하는 Computer Program
- 2. Web Broswer Plug In (Adobe Flash Player) 사용하여 동영상 재생

** PHP (Professional Hypertext Preprocessor)
- 1. Linux, Unix, Windows 운영체제에서 사용 가능
- 2. 배우기 쉬워 Web Page 제작에 많이 사용
