I. DB 종류
1. 계층형 DB 관리 System (HDBMS: Hierarchical Database Management System)
- 1. Data 상하 종속적인 관계, 계층화 (Tree 구조)
- 2. 접근 속도 빠름, 변화하는 Data 구조에 유연하게 대응 힘듦
- 3. 종류 -> IMS, System2000

2. 망형 DB 관리 System (NDBMS: Network Database Management System)
- 1. Data 구조를 Network 상의 망 형태 (Graph 구조), 논리적 표현한 Data Model
- 2. 계층형 DB 보단 유연, 설계 복잡
- 3. 종류 -> IDS, TOTAL, IDMS

3. 관계형 DB 관리 System (RDBMS: Relational Database Management System)
- 1. 가장 보편화, 상하관계 표시하며 상관관게 정리
- 2. 변화하는 업무, Data 구조에 대한 유연성 좋아 유지 관리 용이
- 3. Oracle -> 미국 Oracle 사, DB 관리 System, Linux/Unix/Window 모두 지원, 대형 System 에서 많이 사용
- 4. SQL Server -> MS 사, 관계형 DB System, Window 지원, C# 등과 가장 잘 호환
- 5. MySQL -> 썬 MicroSystem 소유한 관계형 DB System 이었으나, Oracle 에서 인수, Linux/Unix/Window 모두 지원, OpenSource 기반
- 6. Maria DB -> MySQL 출신 개발자가 만든 DB, MySQL 과 완벽 호환


II. DBMS 특징
- 1. Data 무결성 -> 부적절한 자료 입력, 서로 다른 Data 가 저장되는 것을 허용 X
- 2. Data 일관성 -> 삽입, 삭제, 갱신, 생성 후, Data 가 변함없이 일정
- 3. Data 회복성 -> 장애 발생 시, 특정 상태로 복구
- 4. Data 보안성 -> 불법적인 노출, 변경, 손실로부터 보호
- 5. Data 효율성 -> 응답 시간, 저장 공간 활용 최적화, 사용자 S/W, System 등 요구 조건 만족

Data 통합 운영 -> 중복성 감소, 불일치 감소 => Data 일관성, 무결성 유지

III. 무결성 (관계 형성을 통한 상위 Table 의 PK 전이)
- 1. 참조 무결성 -> 외래키 값 = NULL, 참조 Relation 의 기본키 값과 동일해야 함
- 2. 개체 무결성 -> 한 Relation 의 기본 Key, 어떤 속성도 NULL 값, 중복 값 가질 수 없음
- 3. Domain 무결성 -> 각 속성 값은 반드시 정의된 Domain 에 속한 값이어야 함
- 4. Null 무결성 -> Relation 특정 속성 값 NULL 될 수 없음 (Not NULL)
- 5. Unique(고유) 무결성 -> Relation 특정 속성 값 중복 될 수 없음 (Unique)


IV. DB 설계
- 1.현실 세계 업무적인 Process 를 Computer 세계로 DB 화 하기 위한 과정
- 2. 순서
  = 요구조건 분석 -> 개념적 설계 -> 논리적 설계 -> 물리적 설계 -> 구현 (Create Table) -> 운영 -> 감시 및 개선

V. 요구조건 분석
- 업무 프로세스 분석 => 요구조건 명세서 수정

VI. 개념적 설계
- 개체 Type, 관계 Type 이용, 현실 세계를 개념적으로 표현 (산출물: 개체관계도 = ER Diagram)

1. 개체 (Entity) -> DB 에 표현하려고 하는 현실 세계의 대상체
2. 속성 (Attribute) -> Entity 의 성질, 분류, 식별, 수량, 상태 (학생 - 학번, 이름, 전화번호)
3. 관계 (Relationship) -> 두 개체 간 의미 있는 연결 (학생은 과목 수강, 과목은 학생에게 수강되어야 함)

** ER Model
- 1. 개념적 Data Model 의 가장 대표적인 것
- 2. 1976년 P.Chen 에 의해 처음 제안
- 3. 개체, 속성, 관계 등에 대해 용이하게 표현할 수 있는 ERD 정의

VII. 논리적 설계
- 1. 목표 DBMS 에 맞춰 논리적 모델로 설계 (관계형, 객체지향형, 객체관계형, 계층형, 망형, Model)
- 2. 관계형 Schema (Relation Schema) 작성, Table 형태로 표시

VIII. 물리적 설계
- 1. 물리적 구조 Data 표현
- 2. 응답시간, 저장공간 효율성, Transaction 처리량 고려

IX. 관계형 DB 의 Relation 구조
1. Relation Schema (스킴, 내연) -> 속성 이름들 (Relation 틀, 구조)
2. Relation Instance (외연) -> Tuple 들의 집합 (Relation 실제 값 (실제 Data))
3. Tuple -> 행 (Row)
4. 기본 Key, 주 Key 주식별자 (Primary Key) - ex) 학번
5. Table (Relation) = 개체 (Entity), 속성 (Attribute) = 열, Column

** Domain -> 한 속성에 나타날 수 있는 값들의 범위 (집합)
** 차수 (Degree) -> 속성들의 수
** Cardinality -> Tuple 들의 수
** Null -> "해당없음", 정보 부재 나타내기 위해 사용, 특수 Data 값 => 공백, 0 (Zero X)
