I. DB 종류
1. 계층형 DB 관리 System (HDBMS: Hierarchical Database Management System)
- 1. Data 상하 종속적인 관계, 계층화 (Tree 구조)
- 2. 접근 속도 빠름, 변화하는 Data 구조에 유연하게 대응 힘듦
- 3. 종류 -> IMS, System2000

2. 망형 DB 관리 System (NDBMS: Network Database Management System)
- 1. Data 구조를 Network 상의 망 형태 (Graph 구조), 논리적 표현한 Data Model
- 2. 계층형 DB 보단 유연, 설계 복잡
- 3. 종류 -> IDS, TOTAL, IDMS

3. 관계형 DB 관리 System (RDBMS: Relational Database Management System)
- 1. 가장 보편화, 상하관계 표시하며 상관관게 정리
- 2. 변화하는 업무, Data 구조에 대한 유연성 좋아 유지 관리 용이
- 3. Oracle -> 미국 Oracle 사, DB 관리 System, Linux/Unix/Window 모두 지원, 대형 System 에서 많이 사용
- 4. SQL Server -> MS 사, 관계형 DB System, Window 지원, C# 등과 가장 잘 호환
- 5. MySQL -> 썬 MicroSystem 소유한 관계형 DB System 이었으나, Oracle 에서 인수, Linux/Unix/Window 모두 지원, OpenSource 기반
- 6. Maria DB -> MySQL 출신 개발자가 만든 DB, MySQL 과 완벽 호환


II. DBMS 특징
- 1. Data 무결성 -> 부적절한 자료 입력, 서로 다른 Data 가 저장되는 것을 허용 X
- 2. Data 일관성 -> 삽입, 삭제, 갱신, 생성 후, Data 가 변함없이 일정
- 3. Data 회복성 -> 장애 발생 시, 특정 상태로 복구
- 4. Data 보안성 -> 불법적인 노출, 변경, 손실로부터 보호
- 5. Data 효율성 -> 응답 시간, 저장 공간 활용 최적화, 사용자 S/W, System 등 요구 조건 만족

Data 통합 운영 -> 중복성 감소, 불일치 감소 => Data 일관성, 무결성 유지

III. 무결성 (관계 형성을 통한 상위 Table 의 PK 전이)
- 1. 참조 무결성 -> 외래키 값 = NULL, 참조 Relation 의 기본키 값과 동일해야 함
- 2. 개체 무결성 -> 한 Relation 의 기본 Key, 어떤 속성도 NULL 값, 중복 값 가질 수 없음
- 3. Domain 무결성 -> 각 속성 값은 반드시 정의된 Domain 에 속한 값이어야 함
- 4. Null 무결성 -> Relation 특정 속성 값 NULL 될 수 없음 (Not NULL)
- 5. Unique(고유) 무결성 -> Relation 특정 속성 값 중복 될 수 없음 (Unique)


IV. DB 설계
- 1.현실 세계 업무적인 Process 를 Computer 세계로 DB 화 하기 위한 과정
- 2. 순서
  = 요구조건 분석 -> 개념적 설계 -> 논리적 설계 -> 물리적 설계 -> 구현 (Create Table) -> 운영 -> 감시 및 개선

V. 요구조건 분석
- 업무 프로세스 분석 => 요구조건 명세서 수정

VI. 개념적 설계
- 개체 Type, 관계 Type 이용, 현실 세계를 개념적으로 표현 (산출물: 개체관계도 = ER Diagram)

1. 개체 (Entity) -> DB 에 표현하려고 하는 현실 세계의 대상체
2. 속성 (Attribute) -> Entity 의 성질, 분류, 식별, 수량, 상태 (학생 - 학번, 이름, 전화번호)
3. 관계 (Relationship) -> 두 개체 간 의미 있는 연결 (학생은 과목 수강, 과목은 학생에게 수강되어야 함)

** ER Model
- 1. 개념적 Data Model 의 가장 대표적인 것
- 2. 1976년 P.Chen 에 의해 처음 제안
- 3. 개체, 속성, 관계 등에 대해 용이하게 표현할 수 있는 ERD 정의

VII. 논리적 설계
- 1. 목표 DBMS 에 맞춰 논리적 모델로 설계 (관계형, 객체지향형, 객체관계형, 계층형, 망형, Model)
- 2. 관계형 Schema (Relation Schema) 작성, Table 형태로 표시

VIII. 물리적 설계
- 1. 물리적 구조 Data 표현
- 2. 응답시간, 저장공간 효율성, Transaction 처리량 고려


IX. 관계형 DB 의 Relation 구조
1. Relation Schema (스킴, 내연) -> 속성 이름들 (Relation 틀, 구조)
2. Relation Instance (외연) -> Tuple 들의 집합 (Relation 실제 값 (실제 Data))
3. Tuple -> 행 (Row)
4. 기본 Key, 주 Key 주식별자 (Primary Key) - ex) 학번
5. Table (Relation) = 개체 (Entity), 속성 (Attribute) = 열, Column

** Domain -> 한 속성에 나타날 수 있는 값들의 범위 (집합)
** 차수 (Degree) -> 속성들의 수
** Cardinality -> Tuple 들의 수
** Null -> "해당없음", 정보 부재 나타내기 위해 사용, 특수 Data 값 => 공백, 0 (Zero X)

1. Relation 특징
- 1. 한 Relation 정의된 Tuple 들은 모두 다름
- 2. 한 Relation 정의된 Tuple 들은 순서 무관
- 3. Tuple 들은 시간에 따라 변함
- 4. Relation Schema 구성하는 속성들도 순서 무관
- 5. 속성 명칭 유일, 속성 값 동일해도 됨
- 6. 속성 - 원자값 (속성 값 분해 X, 다중 값 X)
- 7. Relation 구성하는 Tuple 을 유일하게 식별, 속성들의 부분집합을 Key 로 설정

2. Key
- 1. Super Key -> 속성들의 집합으로 구성된 Key (유일성)
- 2. 후보 Key -> 모든 Tuple 들을 유일하게 식별할 수 있는 하나, 몇 개의 Attribute 집합
- 3. 기본 Key -> 후보키 중 선택한 Key (중복 X, Null 값 가질 수 없음)
- 4. 대체 Key -> 후보키 중 기본 Key 제외한 속성들
- 5. 외래 Key -> 참조하고자 하는 R 의 기본 Key 와 동일

슈퍼 -----------
| 후보 --------|
| | 대체 ----| |
| | | 기본 | | |
---------------

3. CRUD Matrix
- 1. 업무 Process, Data 간 상관 분석표, 행 - 업무 Process, 열 - Entity Type
- 2. CRUD -> CRUD Matrix


XI. 운영체제 설치 및 운용 - 수행 순서
1. OS 선택
- 1. Windows OS 선택, 설치
  = 1. Windows Home -> 개인 사용자
  = 2. Windows Pro -> 소규모 기업용
  = 3. Windows Pro for Workstation -> Transaction 몰리거나 복구 기능 필요로 하는 소규모 기업용 OS
  = 4. 선택 기준 -> 생산성 및 사용자, 환경, 보안, 관리 및 배포, 기본 사항, Server 환경 지원

- 2. Linux / Unix OS 선택
  = 1. Debian GNU/Linux -> 개발자에게 최적화
  = 2. Ubuntu -> 가장 광범위하게 쓰이는 Ubuntu OS
  = 3. openSUSE -> 안정화된 버전 (openSUSE), Test 중인 버전 (Tumpleweed)
  = 4. Fedora -> Smart 설정, Update 로 사용자 편의성 제공
  = 5. CentOS -> Programming 에 최적화된 환경 제공
  = 6. Slackware -> System 관리자를 위한 복구 툴 내장

2. OS 운용 - 최신 Update 유지 및 System 복원 기능 활성화

** Server 운용 기준
- 1. 운용 Architecture 파악, Network 구성 현황 및 장비 메뉴얼 확보
- 2. 장비 가동, 중지 매뉴얼 확인
- 3. 백업 주기, 보안 Update 주기 설정, 점검
- 4. 트러블 발생 시 대처 방안 마련

** 개발 PC 용 OS 운용 기준
- 1. 정기적인 Data Backup
- 2. 주기적 보안 Update, System 백업 장려화
- 3. 트러블 발생 시 문의처 정보 확인


XII. 개발도구 설치 및 운용 - 수행 순서
1. Programming 언어 설치
- 1. 개발 목적에 맞게, 대부분 언어는 GUI 제공, Community 활성화되어 있으므로, 자신에게 맞는 것 선택
- 2. Programming 설치
  = 언어 선택, Download -> 32bit, 64bit 확인, 설치 후 Update 현황 파악하여 최신 상태 유지

** 언어 선택 시 고려사항
- 1. 언어 Type -> 정적, 동적 개발 언어
- 2. 목표 System 특징 -> 일반 System, Domain 특화 System
- 3. 언어 특징 -> 객체 지향, 명령형, 서술형, 순서형, 선언형
- 4. 지원 -> 관리도구 지원형, 언어 독립형

** 정적 Type 언어
- 정적 자료형, Type Error 같은 오류 초기 파악 가능

** 동적 Type 언어
- 동적 자료형, 자료형이 동적으로 변함, Programmer 입장에선 매번 Type 지정할 필요 없으므로, 개발 속도 빠름

2. 개발 지원 도구 활용
- 1. 개발 Framework 설치 및 운영 -> Spring Framework, 전자 정부 Framework
- 2. 버전관리 System 구축 및 활용


XIII. 개발환경 선택, Cloud 환경 설정 - 수행 순서
1. 개발환경을 System 구현 목적에 맞게 결정
- 1. On-Premise 방식 -> Intranet 망 활용 (외부 차단된 상태), Data 와 정보 외부 유출이 민감할 경우 채택
- 2. Cloud 방식 -> Amazon, Google, MS 등 Cloud 공급 임대 Service 하는 회사들의 Service 임대, 개발환경 구축
- 3. HyBrid 방식 -> On-Premise + Cloud 방식 혼용

2. Cloud 기반 개발환경 구축
- 1. 장비 임대, Storage 대여, 개발자 도구 및 생산성 향상 위한 각종 Utility 지원
- 2. Cloud 기반 개발환경 Infra 제공 범위
  = 1. Computing 환경 -> Program 설치, 운용할 H/W 장비 Setting
  = 2. Storage -> 대규모 Data 저장, 관리, 전송, 이중화하기 위한 저장 장치 Setting
  = 3. DB -> 실 Data 저장, 관리하기 위한 DB Setting
  = 4. Networking 전송 -> 구성된 Service, Program, Content 효율적으로 전달
  = 5. 개발자 도구 -> Program 실제 개발
  = 6. 보안 환경 구축 -> 외부 침입으로부터 System, Data 보호
  = 7. 응용 기술 Setting -> AR, VR 개발
  = 8. 생산성 향상
