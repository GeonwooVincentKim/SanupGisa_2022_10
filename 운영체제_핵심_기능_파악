I. 기억장치 관리
1. 반입 (Fetch) 전략
- 1. 보조 기억 장치의 Program, Data 를 언제 주기억장치로 적재할 것인지 결정
- 2. 종류
  = 1. 요구 반입 -> 요구할 때 적재
  = 2. 예상 반입 -> 미리 예상하여 적재

2. 배치 (Placement) 전략
- 1. 주기억장치의 어디에 위치시킬 것인지를 결정
- 2. 종류
  = 1. 최초 적합 (First Fit) -> 첫 번째 배치시키는 방법 (속도 ↑, 공간 ↓)
  = 2. 최적 적합 (Best Fit) -> 단편화를 가장 작게 남기는 분할 영역에 배치시키는 방법 (속도 ↓, 공간 ↑)
  = 3. 최악 적합 (Worst Fit) -> 단편화를 가장 많이 남기는 분할 영역에 배치시키는 방법 (속도 ↓, 공간 ↓)
  
3. 교체 (Replacement) 전략
- 1. 주기억 장치의 모든 영역이 이미 사용중인 상태
- 2. 이미 사용되고 있는 상태에서 어느 영역을 교체하여 사용할 것인지를 결정
- 3. FIFO, OPT, LRU, LFU, NUR, SCR

** Example
First Fit, Best Fit, Worst Fit 방법에 대해서 10K 프로그램이 할당될 부분

영역 1  9K
영역 2  15K --> First Fit
영역 3  10K --> Best Fit
영역 4  30K --> Worst Fit


** 단편화
- 1. 내부 -> 할당 후 남은 공간 (15K -> 5K, 30K -> 20K)
- 2. 외부 -> 할당하지 못한 공간 (9K)


II. Windows Memory & Linux / Unix Memory 관리 방법
1. Windows Memory 관리 방법
- 작업 관리자에서 Memory 관리
  = 1. Memory 상태 확인 
  = 2. 필요 이상의 Memory 를 활용하고 있어 Program 을 중단시켜야 할 경우, Process 끝내기 클릭

2. Linux / Unix Memory 관리 방법
- 1. meminfo 명령어 -> 메모리 상태 점검
- 2. swapping -> Memory 부족 시, Program 에 할당된 Memory 일부를 Disk 에 저장
- 3. /proc/sys/vm/min_free_kbytes -> 최소 가용 Memory 확보 기준 해제


III. Process 관리
1. Process 정의 / 특징
- 1. 정의
  = 1. 주기억장치에 저장된 Program (실행중인 프로그램)
  = 2. OS 가 관리하는 최소 단위의 작업
  = 3. 비동기적 (비연속적, 독립적) 행위를 일으키는 주체
 
- 2. 특징
  = 1. Procedure (Program 일부) 활용
  = 2. PCB 를 가진 Program
  = 3. CPU 에 의해 수행되는 사용자 및 시스템 Program
  = 4. Process 가 자원을 이용하는 정상적인 작동의 순서
    -> 요청 - 사용 - 해제
  
  = 5. 지정된 결과를 얻기 위한 일련의 동작
  = 6. Disk (보조기억장치) 에 저장된 Program (X)


** PCB (Process Control Block, Process 제어 활용)
- OS (운영체제) 가 Process 에 대한 중요한 정보를 저장해 놓은 곳 (Process 정보 List)

2. Process 상태 전이도 <보조기억장치를 활용>
- 1. 실행 상태 (Run) -> Process 가 CPU 를 차지하여 실행 중인 상태
- 2. Timer Run Out 
  -> 1. CPU 할당 받아 실행 중인 Process 가 할당시간을 초과
  -> 2. CPU 를 다른 Process 에게 양도하고 자신은 준비상태로 전이되는 것
  -> 3. 실행 상태 --> 준비 상태 => Timer Run Out

- 3. 준비 상태 (Ready) 
  -> Process 가 CPU 를 사용하여 실행될 수 있는 상태
  -> 준비 상태 --> 실행 상태 => Dispatch 
  
- 4. 대기 상태 (Wait, Block) 
  -> 1. 어떤 사건이 발생하기를 기다리는 상태
  -> 2. 대기 상태 --> 준비 상태 => Wake Up

- 5. Block 
  -> 1. 실행 중인 Process 가 지정된 시간 이전
  -> 2. 다른 작업을 위하여 스스로 Process 를 양도, 대기 상태로 전이되는 것
  -> 3. 실행 상태 --> 대기 상태 => Block


IV. Process Scheduling (CPU Scheduling)
1. Computer System 성능 증대, Process 사용 순서를 결정하기 위한 정책
2. 목적 
- 1. 처리율 증가, CPU 이용률 증가, 우선 순위 제도
- 2. 오버헤드(부하) 최소화, 응답 시간 / 반환 시간 / 대기 시간 최소화
- 3. 균형 있는 자원의 사용, 무한 연기 회피

3. 종류
- 1. Process Scheduling 기법
  = 1. 비선점 Scheduling (Non Preemptive) 
    -> 1. 비효율적, 비양보
    -> 2. Process 에게 이미 할당된 CPU 를 강제로 빼앗기 X
    -> 3. 사용이 끝날 때까지 기다려야 하는 방법
    -> 4. 일괄처리(오버헤드 발생 X), 실시간 처리 X, 중요한 작업이 기다리는 경우 발생
    -> 5. 대표적인 Scheduling => FIFO, SJF, HRN

** Example
1. Word -> Music -> Internet
2. Word 부터 하나씩 순서대로 처리

  = 2. 선점 Scheduling (양보)
    -> 1. 효율적
    -> 2. 우선 순위가 높은 다른 Process 가 할당된 CPU 를 강제로 빼앗기 O
    -> 3. 실시간 처리, 대화식 시분할 처리 (오버헤드 발생 O)
    -> 4. 대표적인 Scheduling => RR, SRT


V. 비선점 > FIFO (First-In First-Out) = FCFS (First-Come First-Service)
1. 준비상태에서 도착한 순서에 따라 CPU 할당
2. 평균 반환시간 = 평균 실행시간 + 평균 대기시간

** Example
[ A | B | C ]
 20초 6초 3초

- C -> B -> A 순서로 실행


VI. 비선점 > SJF (Shortest Job First)
1. 작업 끝나기까지의 실행 시간 추정치가 가장 작은 작업 먼저 실행
2. FIFO 보다 평균 대기 시간 작고, 긴 작업의 경우, FIFO 기법보다 더 크고 예측 더욱 어려움
3. 작업 시간이 큰 경우, 오랫동안 대기
- 긴 작업과 짧은 작업 간의 지나친 불평등

** Example
[ C | B | A ]
 3초 6초 20초
 
 - 1. 도착 시간이 주어졌을 경우
 20초 3초 6초
[ A | C | B ]

 - 2. 실행시간이 큰 작업은 무한연기 (기근 현상) 가능성 o
   = 해결 (Aging 기법) : 강제 우선순위 부여
   

VII. 비선점 > HRN (Highest response ratio Next)
1. SJF 방식의 단점 보완 (긴 작업과 짧은 작업 간의 지나친 불평등)
2. 우선 순위 계산식 -> (대기 시간 + 서비스 시간) / 서비스 시간

** Example
(기출) 우선 순위가 가장 높은 작업

작업  대기시간  서비스시간
  A     5         5
  B    10         6
  C    15         7
  D    20         8


VIII. 선점 > RR (Round Robin)
1. 대화식 시분할 시스템 (Time Sharing System) 을 위해 고안된 방식
2. FIFO 방식으로 선점형 기법
- 1. 할당되는 시간 ↑ = FCFS 기법
- 2. 할당되는 시간 ↓ = 문맥교환 및 오버헤드 자주 발생


IX. 선점 > SRT (Shortest Remaining Time)
1. SJF 방식으로 선점형 기법
2. Process 남은 시간, 준비상태 Queue 에 새로 도착한 Process 의 실행 시간 비교
3. 가장 짧은 실행 시간을 요구하는 Process 에게 CPU 를 할당하는 기법


작업  도착 시간  실행 시간
A        0         15                   A    B    C   B    A
B        1          6                  1초  1초  3초  5초  14초
C        2          3


X. Windows Process 관리 방법
- Process 우선 순위 설정
  = 작업관리자 -> 세부 설정 -> 우선 순위 설정 -> 보통
  
  
XI. Linux / Unix Process 관리 방법
1. /proc Directory 아래, 현재 실행되는 Process 확인
2. 세부적인 Process 확인, Process PID (Process 고유 번호), 해당 Directory 로 이동하여 명령어 사용하여 확인
- 해당 PID Process 가 종료되면 임시로 생성되었던 Directory 는 사라지는 것을 확인

3. Top Tool (명령어) 을 사용, 현재 System 의 CPU 와 RAM 사용률을 Monitoring


XI. 가상화, Cloud
* Platform 가상화, Resource 가상화
- 1. Platform 가상화 
  -> 1. H/W Platform 위에서 실행되는 Host Program 이 Guest Program 을 만듦
  -> 2. 마치 독립된 환경을 만들어 낸 것처럼 보여주는 것
  -> 3. Guest S/W 위에서 사용자는 독립된 H/W 에서 S/W 가 실행되는 것처럼 사용 가능
  -> 4. VM ??

- 2. Resource 가상화
  -> 1. 메모리, 저장장치, 네트워크 등을 결합, 나누는 것
  -> 2. 사용자는 가상화된 물리적 장치들이 어떤 위치에 있는지 모르는 경우 많음

2. Cloud
* Internet 기반에서 구동되는 Computing 기술
- 1. Cloud Computing 이용
  -> 1. 응용 프로그램을 필요에 따라 불러 사용
  -> 2. Data 를 손쉽게 저장 및 추출 가능
  
- 2. Tablet, 휴대폰 등 사용 Device 가 다양해지면서 Cloud Computing 의 중요도 증대


** Cloud Service 종류
1. 최초 Cloud Service 
- 1. Gmail, Dropbox
- 2. S/W 를 Web 에서 사용 가능한 Sass (Software as a Service)

2. Server, Storage, Network 장비 등의 IT Infra 장비 대여
- Iass (Infrastructrue as a Service)

3. Platform (개발 환경) 대여 
- Paas (Platform as a Service)
