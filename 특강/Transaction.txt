I. 트랜잭션 (Transaction)
1. 정의
- 1. DB 상태를 변화시키는 논리적 연산의 집합
- 2. 사용자의 DB 접근 기본 단위, 동시정 제어 (Concurrency Control, 병행 제어)의 기본 단위

2. Transaction 특성 (ACID)
- 1. 원자성 (Atomicity) -> 모두 반영 or 전혀 반영되지 않아야 함 (부분 실행 안됨 -> All or Nothing)
- 2. 일관성 (Consistency) -> Transaction 이 그 실행을 성공적으로 완료 시, 언제나 일관성 있게 DB 상태로 변환
- 3. 독립성, 격리성 (Isolation) -> 둘 이상 Transaction 이 동시 병행 실행 시, 또 다른 하나의 Transaction 연산 끼어들 수 없음
- 4. 영속성, 지속성 (Durability) -> Transaction 결과는 영구 반영

** ACID 특성
- 1. 원자성 가장 중요
- 2. 원자성 만족 못하면 Transaction 은 예기지 못한 부작용 발생할 수 있음
- 3. Transaction 수행 도중 장애 발생하면 그 때까지 수행한 결과는 없었던 것으로 하여야 함

3. Transaction 상태
- 1. 활동 (Active) -> Transaction 실행 시작, 실행 중인 상태
- 2. 부분적 완료 (Partially Committed)
  = Transaction 마지막 명령문을 성공적으로 실행한 직후의 상태

- 3. 실패 (Failed)
  = Transaction 이 정상적인 실행을 더 이상 수행할 수 없는 상태

- 4. 철회 (Aborted) -> Transaction 실행 실패하여 Rollback 연산 수행
- 5. 완료 (Committed) -> Transaction 실행 성공적으로 완료하여 Commit 연산 수행

** 철회 Transaction 처리 방법
- 1. Transaction 재시작
  = Transaction 철회 원인이 Transaction 내부적인 논리 오류 X, H/W 또는 S/W 적인 오류로 인하여 발생하였을 경우 사용

- 2. Transaction 폐기
  = 1. Transaction 내부적인 논리 오류 O -> 사용
  = 2. 철회 Transaction 을 재시작하여도 동일한 결과를 초래할 것이기 때문에 Transaction 폐기시키게 됨


II. Transaction Schedule
1. 정의 -> 인터리빙 (병행성 확보를 위해 여러 Transaction 들이 매우 짧은 시간 동안 번걸아가며 수행) 허용 시, Transaction 들의 개개 연산들이 실행되는 순서
2. 직렬 스케줄 (Serial Schedule)
- 하나의 Transaction 연산 모두 실행, 다음 Transaction 수행하는 방법 (인터리빙 X)

3. 비직렬 스케줄 (NonSerial Schedule)
- Transaction 들을 병행수행하는 기법, 각 Transaction 연산들을 번갈아가며 수행 (인터리빙 O)

4. 직렬가능 스케줄 (Serializable Schedule)
- 1. (직렬 + 비직렬) 결과 = 직렬가능 스케줄 결과
- 2. 병행 수행 최대한 허용, 직렬 스케줄과 동일한 결과를 갖도록 실행 순서를 제어
