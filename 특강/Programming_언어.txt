I. Programming 언어
1. 정의 - 명령어 집합을 Program, 작성하는 과정을 Programming, 명령어 집합 (Program) 의 종류 -> Programming 언어
2. 저급언어 (기계어 - 0, 1), 고급언어 (C, Java, Python)
- Bit (Binary Digit) - 0과 1 값으로 작성 및 변환 -> Computer 가 이해할 수 있도록 함


II. 자료의 단위
1. bit -> 정보 최소 단위 (1bit 정보 표현 개수 = 2^1 -> 2개 -> 0, 1)
2. Byte -> bit 8개 => 256가지 정보 표현

** ASCII Code (아스키 Code)
- 1. 미국 표준협회, 7 bit (2^7 = 128개), 통신 제어용, Micro Computer 기본 Code 로 사용
- 2. 96개 영문 대소문자, 숫자, 특수 문자와 32개 제어 문자 = 128개 문자만 표현 => 여러 언어들 (한국어 등) 섞어 사용 불가

** UniCode (유니코드)
- 16비트, 최대 65,536자 표혀느 각 나라별 언어 모두 표현하기 위해 나온 Code 체계


III. 명령어 처리 개념 이해
1. 메모리와 프로세스 처리 방식
- 1. 메모리 -> 명령어 저장, 데이터 저장
- 2. 프로세서 -> 명령어 처리, 데이터 처리
- 3. 1번과 2번 서로 번갈아가며 반복

2. Program 과 명령어 처리 방식
- 1. 명령어와 데이터 (변수) 를 저장 -> 각각 서로 다른 Memory 주소에 저장
- 2. Load A -> A 에 있는 값을 가지고 옴 (1)
- 3. Add B -> 현재 값에 변수 B에 있는 값을 더하게 됨 (1 + 2)
- 4. Store C -> 결과 값(Add B) 을 변수 C 에 저장

3. Memory 와 Processor 진행
- 1. 인출 -> 명령어 인출(Fetch), Memory 에 접근하여 명령문을 가지고 옴
- 2. Load, Add, Store 같은 것들 = 연산 Code
- 3. 변수 A, 변수 B, 변수 C와 같이 Data 가 들어가는 것 = Operand

4. Decoder (해석) -> 명령어 해석 (ex - Load 의 값이 들어옴)
5. ALU (연산 장치) -> 명령어 해석 (Decode) -> ALU (연산장치)
6. 일시적으로 계산 결과를 ACC (누산기) 에 저장
7. 변수에 저장, 쓰기, 기록 -> CU (제어장치) 를 거쳐감


IV. 명령어 (Instruction) 형식
1. 용도에 따라 Field 로 나눌 수 있음, Field 수, 배치 방법, 각 Field 에 포함되는 0과 1의 개수 정의
2. 연산 (OP) Code -> 수행될 연산 지정 (LOAD, ADD 등), 표현 가능한 명령 개수는 2^n 개(4bit: 2^4 개)
3. Operand -> 연산 수행하는데 필요한 Data 또는 Data 주소

4 bit         4 bit         8 bit
연산 코드    Operand 1     Operand 2  => 명령어 형식


V. 명령어 실행 단계
1. Fetch (인출) -> 실행할 명령어 가져와(인출) CPU 에 적재
2. Decode (해석) -> 명령어 해석
3. Execute (실행) -> Data 에 대한 연산 수행
4. Write Back (쓰기) -> 처리 완료된 Data 를 기억 장치 (Memory) 에 다시 기록


IF                     ID             EX           WB
(Instruction F)  (Instruction D)
Fetch                 Decode        Execute    Write Back
인출                    해석          실행         기록


Store A 10 -> 10을 A 에 저장하라
Store = 연산코드
A = 오퍼랜드1
10 = 오퍼랜드2

인출 -> 해석 -> 실행 -> 쓰기

** 주소 지정 방식
1. 3주소 명령어
OP Code  OP 1   OP 2   OP 3
- 1. 장점 -> 원래 자료 유지, 프로그램 전체 길이 짧고 주기억장치 접근 횟수 줄어듦
- 2. 단점 -> 명령어 1개 길이 긺, 수행시간 긺
- 3. 예) Add A B C

2. 2주소 명령어
OP Code  OP 1   OP 2
- 1. 장점 -> 3주소보다 명령어 길이 짧음
- 2. 단점 -> 전체 Program 길이 길어짐, OP 1 값 소멸

3. 1주소 명령어
OP Code OP 1
- 누산기 (ACC) 이용

4. 0주소 명령어
- 1. 0주소 명령어
- 2. Stack 이용

** ACC (누산기, Accumulator)
- 연산 결과를 일시적으로 저장하는 Register (임시기억 장소)


VI. Programming 언어 관련 용어
- 1. 변수 -> 주기억장치 기억, 사용하는 공간
- 2. 식별자 -> 변수명, Program 구성 요소 구별
- 3. 바인딩 -> 변수, 변수와 관련된 속성 (Memory 주소, Data Type, 실제 값) 연결
  = 1. 정적 Binding -> Program 실행 시간 전 (Compile), 속성 연결 (ex -> C언어, int x; => Compile 시간에 변수 Data Type 결정)
  = 2. 동적 Binding -> Program 실생 시간에 속성 연결 (ex -> Python, Interpreter 언어, a = "gisa" => 실행 시간 (Runtime) 값에 따라 변수 Data Type 결정

- 4. 선언 -> 변수에 이름, Data Type 등의 속성 부여하는 작업
  = 1. 명시적 선언 -> 선언문 이용, 변수 이름 나열 후 속성 부여
  = 2. 묵시적 선언 
    -> 1. 별도 선언문 없이 Default 규칙에 의해 속성 부여
    -> 2. FORTRAN => 선언문 없이 변수 이름 그냥 사용하려면 그 이름이 선주된 것으로 간주

- 5. 할당 -> 변수에 Memory 공간을 Binding 하는 작업
- 6. Data Type -> 변수가 가질 수 있는 속성 값이 길이 및 성질
- 7. 연산자 -> Data 처리, 연산 표현하는 기준 (+, -)
- 8. 명령문 -> Program 구성하는 문장
- 9. 변수 영역 -> 변수가 사용되는 범위
  = 1. 정적 영역 => 변수 찾을 때 구조에 기반하는 형식
  = 2. 동적 영역 => 구조보다는 순서에 기반하는 형식


** 표기법
- 1. 2진법 -> 0b0101 (0b 를 사용함으로써 2진수 임을 강조)
  = 0b0101 -> 5

- 2. 8진법 -> 0o21 (0o 를 사용함으로써 8진수 임을 강조)
  = 2*8^1 + 1*8^0 = 16 + 1 = 17

- 3. 16진수 -> 0x11 (0x 를 사용함으로써 16진수 임을 강조)
  = 1*16^1 + 1*16^0 = 16 + 1 = 17

- 4. 10진수 (4 Byte)
  = 범위 (-2,147,483,648 ~ 2,147,483,647) 정수
