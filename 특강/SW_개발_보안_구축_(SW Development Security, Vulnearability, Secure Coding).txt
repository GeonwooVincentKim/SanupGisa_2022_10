I. SW 개발 보안
1. 보안 취약점을 SW 개발 단계에서 미리 제거, 생명주기별 단계적으로 수행, 안전한 보안요소로 만족
2. SW 개발 보안 3요소 (= SW 개발 보안 목표, 정보 보안 3원칙)
- 1. 기밀성 (Confidentiality)
  = 인가 (Authorization) 된 사용자만 정보 자산에 접근 가능 (ex -> 방화벽, 암호)

- 2. 무결성 (Integrity)
  = 1. 적절한 권한을 가진 사용자만 인가된 방법으로 정보 변경할 수 있도록 하는 것
  = 2. ex - 지폐는 오직 정부(적절한 권한을 가진 사용자)만이 한국은행을 통해(인가된 방법으로만) 만들거나 변경할 수 있음

- 3. 가용성 (Availability)
  = 1. 정보 자산에 대해 적절한 시간 (시점) 에 접근 가능한 것
  = 2. ex - 24시간 편의점은 밤낮 언제나 무엇인가 필요할 때 항상 얻을 수 있음 -> 가용하다.

** 3요소 외 보안 항목
- 1. 인증 (Authentication) -> System 이 사용자 정확 식별, 사용되는 (ex -> 보안절차 - Login)
- 2. 부인 방지 (Non-repudiation) 
  = 1. Message 송수신, 교환 후, 통신이나 처리가 실행된 후, 그 사실을 증명 -> 사실 부인을 방지하는 기술
  = 2. Email 송신했는데 송신 안했다고 주장하는 송신자 부인 막는 송신 부인 방지

3. SW 개발 보안 용어
- 1. 자산 (Asset) -> 조직 Data, 조직 소유자가 가치를 부여한 대상 (Server H/W, S/W 와 기업 중요 Data)
- 2. 위협원 (Threat Agents)
  = 조직 자산 파괴, 손해 발생하는 행동 가능한 내.외부 주체 (Hacker, 내부의 인가 받지 않는 임직원, 단체, 자연 재해)

- 3. 위협 (Threat)
  = 조직 자산 위협되는 위협원의 공격 행동, 병합, 삭제, 자산 불법 유출, 위/변조, 파손

- 4. 취약점 (Vulnerability)
  = 위험 발생하기 위한 사전 조건에 따른 상황 (평문 전송, 입력 값 검증 X, 비밀번호 공유하는 행위)

- 5. 위험 (Risk)
  = 자신에 나쁜 영향의 결과를 가져올 확률과 영향도


II. 취약점 (Vulnerability)
1. 정의 -> 위협 (Threat) 에 의해 이용되어, 위협 (Threat) 을 발생시킬 환경 제공
2. 취약점 관리 목록
- 1. System 물리적 환경, 직원
- 2. 관리, 조직 내 관리 절차와 보안 방식
- 3. H/W, S/W
- 4. 통신 장비와 시설, 경영 활동과 Service 전달

3. 취약점 공격 (Exploit) 의 4가지 예시
- 1. 공격자 Overflow 취약점 찾기
- 2. 공격자 사용자가 악성 Code 들어있는 Email Message 열게 만들기
- 3. 내부인 보호, 암호화된 Program 을 USB 에 담아와서 집에서 Crack
- 4. Computer System 1층에 설치 -> 시스템 수해로 인한 피해 발생

** 익스플로잇 (Exploit, 취약점 공격) -> 취약점을 이용한 공격
- Computer, Computer 관련 전자제품 보안 취약점을 이용한 공격 방법

** Crack
- 1. 암호 걸려있는 정품 S/W, 암호풀어 무제한 사용 가능하게 만듦
- 2. Cracker 는 중요한 System 자원 파괴, 훔치는 사람을 정의


III. S/W 취약점
1. Memory 보안 취약
- 1. Buffer Overflow -> Memory Buffer 의 경계값 넘어서 Memory 값 읽거나 저장
- 2. 허상 포인터 (Dangling Pointer) -> 유효한 객체를 가리키고 있지 않은 Pointer

3. 입력 확인 오류
- 1. Format String Bug (포맷 스트링 버그) -> print() 등 외부입력 값에 Format Stream (%s, %x) 을 제아
- 2. SQL Injection (SQL 인젝션) -> 검증되지 않은 외부 입력 값이 SQL Query 문 생성에 사용
- 3. Code Injection -> 유효하지 않은 Data 를 실행 -> 악의적인 결과를 초래하는 보안 약점
- 4. Email Injection -> 모든 사람 목록 추가, 본문에 완전히 다른 Message 를 부정하게 추가
- 5. HTTP Header Injection -> HTTP Header 에 개행문자 등 (CR/LF) 삾입
- 6. HTTP 응답 분할 (HTTP Response Splitting)
  = 응답 Header 포함, 두 번째 응답에 악의적 Code 를 주입해 공격

- 7. Directory 접근 공격 (Directory Traversal)
  = 비공개 Directory File, 부정하게 Directory Path 를 가로질러 접근

- 8. Site 간 Scripting (XSS; Cross Site Scripting)
  = 검증 X 외부 입력 값, 사용자 Browser 에서 악의적인 Script 가 실행

- 9. 경쟁 상태
  = 1. 검사 시점과 사용 시점 (TOCTOU; Time-Of-Check to Time-Of-Use)
    -> Multi Process 상 자원 검사하는 시점, 사용하는 시점이 달라서 발생

** CR (Carriage Return) -> Cursor 를 그 줄 맨 앞으로 이동
** LF (Line Feed) -> Cursor 를 다음 행으로 이동 (개행)

  = 2. Symbolic Link Race (심볼릭 링크 경쟁)
    -> Symbolic Link File 수정, 원본 File 수정 가능

4. 권한 혼동 버그
- 1. Site 간 요청 위조 (CSRF; Cross Site Request Forgery)
  = 자신의 의지와는 무관하게 공격자가 의도한 행위 (수정, 삭제 등) 를 특정 WebSite 에 요청

- 2. ClickJacking (클릭 재킹)
  = 투명한 Button, Link 를 함정, 의도치 않은 Content 에 Access

- 3. FTP Bounce 공격 (FTP Bounce Attack)
  = FTP Protocol 허점, 전송 목적지 주소를 임의로 지정, 임의의 목적지로 Message 나 자료를 전송할 수 있는 공격

** Symbol Link (기호 연결) -> Window 바로 가기 기능과 유사
** Jacking -> 거짓을 사실이라 주장하는 행위
** FTP (File Transfer Protocol) -> Internet 에서 File 전송하는 Service, Port Number = 21


IV. Secure Coding
1. 정의 -> 보안 취약점 사전에 제거, 개발 중인 S/W 의 보안 취약점을 사전에 보완하면서 Programming 하는 것
2. Secure Coding 정책
- 1. 보안 취약점과 결함 방지 -> 사전 정보 System 의 보안 취약점 사전에 대응 또는 제거하여 개발
- 2. 안전한 대고객 Service 확대 -> ICT 신기술 통하여 Internet 을 통해 제공, 지속적 진단 및 효율적 관리 방안 마련
- 3. 안정성 및 신뢰성 확보 -> 신뢰성 기반, 안정성 기반 보안확보, 정보 System 의 기초 단계 ~ 설계 개념 및 Secure Code 수준 대응조치 제안, 보안성 강화

3. Secure Coding 적용 방안
- 1. S/W 취약점 최소화, 초기 설계 단계부터 보안요소를 고려하여 진행
- 2. 결함 발생 후 수정비용은 Secure Coding 비용의 수십 배에 달하는 것으로 파악
  = 1. 보안 정책 수립
  = 2. Secure Coding Guide 작성
  = 3. Secure Coding Guide 교육
  = 4. Secure Coding 자동화 도구


V. Secure Coding 점검 내용 (SW 보안 약점 항목)
1. 정의 -> SW 응용 프로그램의 각 기능 안전하게 서비스하기 위해 보안 항목 식별
2. 입력 데이터 검증 및 표현 -> 입력 값 검증 누락, Data Type 잘못 지정 (SQL Injection, XSS)
3. 보안 기능 -> 보안 기능 (인증, 접근 제어 등) 부적절 (취약한 암호 알고리즘, Hard Code)
4. 시간 및 상태 -> 여러 개 Process 동작 (무한 루프)
5. 에러 처리 -> Error 처리 미흡, 중요 정보 노출 (오류 Message 를 통한 정보 노출)
6. Code 오류 -> Programming 시 잘못된 Code 작성 (부적절한 자원 해제)
7. 캡슐화 -> 캡슐화 불충분 (제거되지 않고 남은 Debug Code)
8. API 오용 -> 의도하지 않은 방법으로 API 사용, 보안 취약한 API 사용 (취약한 API 사용)
9. Session 통제 -> 이미 연결 종료된 Client 정보 삭제 X (잘못된 Session 에 의한 정보 노출)

** API (Application Programming Interface)
- 1. 응용 프로그램 개발 시, 제공하는 라이브러리를 이용할 수 있도록 규칙 정의해놓은 Interface (매개체)
- 2. API -> 개발에 필요한 Library 제공, 원하는 기능 쉽게 구현 가능
- 3. Open API -> 누구나 무료 사용할 수 있게 공개된 API
